#!/bin/bash
#############################################################################
#
#   lib.bashlib: container_build_framework
#
#  thanks to Stephen R. Scaffidi for relativize
#        (https://gist.github.com/hercynium/3899407#file-relpath-bash)
#
#############################################################################

#
# usage: lib.file_env VAR [DEFAULT]
#    ie: lib.file_env 'XYZ_DB_PASSWORD' 'example'
# (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
#  "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature) 
#
function lib.file_env()
{
    local -r var="${1:?"Input parameter 'var' must be passed to 'function ${FUNCNAME[0]}()'"}"
    local def="${2:-}"

    local fileVar="${var}_FILE"
    if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
        echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
        exit 1
    fi
    local val="$def"
    if [ "${!var:-}" ]; then
        val="${!var}"
    elif [ "${!fileVar:-}" ]; then
        val="$(< "${!fileVar}")"
    fi
    export "$var"="$val"
    unset "$fileVar"
}
export -f lib.file_env

#############################################################################
function lib.getFiles()
{
    local -r dir=${1:?"Input parameter 'dir' must be passed to 'function ${FUNCNAME[0]}()'"}
    local OIFS=$IFS
    
    IFS=$'\r\n'
    [ ! -d "$dir" ] || find "$dir"  -maxdepth 1 -and ! -name '.*' -and  -type f -or -type l | sort
    IFS=$OIFS
}
export -f lib.getFiles

#############################################################################
function lib.getProperty()
{
    local -r prop=${1:?"Input parameter 'prop' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r file=${2:?"Input parameter 'file' must be passed to 'function ${FUNCNAME[0]}()'"}

    # get definition from property file
    local -r val="$( grep -e "^${prop}\s*=" "$file" )"
    # only report eval'd string (after removing 'prop=' prefix) if something was found
    [ $? -ne 0 ] || [ -z "$val" ] || eval 'echo' "${val#*=}"
}
export -f lib.getProperty

#############################################################################
function lib.indirectReference()
{
    local -r ahash=${1:?"Input parameter 'ahash' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r key=${2:?"Input parameter 'key' must be passed to 'function ${FUNCNAME[0]}()'"}
    local __lib_savedOptions=$(set +o)
    set +o nounset
    local -r default="$3"

    local val=$( eval "echo \${$ahash[$key]}" )
    [ -n "$val" ] || val="$default"
    echo "$val"
    eval "$__lib_savedOptions"
}
export -f lib.indirectReference

#############################################################################
function lib.intersect()
{
    local -r a1=${1:?"Input parameter 'a1' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r a2=${2:?"Input parameter 'a2' must be passed to 'function ${FUNCNAME[0]}()'"}

    # find entries of a1 which are in a2
    local -a common=()
    for item in $a1; do
        for ref in $a2; do
            if [ "$item" = "$ref" ]; then
                common+=( "$item" )
                break
            fi
        done
    done
    [ ${#common[*]} -eq 0 ] || echo "${common[*]}"
}
export -f lib.intersect

#############################################################################
function lib.lookupId()
{
    local -r database=${1:?"Input parameter 'database' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r entry=${2:?"Input parameter 'entry' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r default=${3:?"Input parameter 'default' must be passed to 'function ${FUNCNAME[0]}()'"}

    local __lib_savedOptions=$(set +o)
    set +o pipefail
    local id=$(getent "$database" "$entry" | cut -d: -f3)
    [ "$id" ] || id=$default
    echo "$id"
    eval "$__lib_savedOptions"
}
export -f lib.lookupId

#############################################################################
function lib.OSid()
{
    if [ -e /etc/os-release ]; then
        grep -e '^ID=' /etc/os-release | awk -F'=' '{ print $2 }'
    else
        echo 'windows'
    fi
}
export -f lib.OSid

#############################################################################
function lib.primaryPid
{
    local -r cmdName=${1:?"Input parameter 'cmdName' must be passed to 'function ${FUNCNAME[0]}()'"}

    ps -o pid,ppid,comm | \
    grep "$cmdName" | \
    grep -v 'grep' | \
    awk '{ pids[$1]=$2 } END { for (pid in pids) { id = pids[pid]; if (! pids[id]) { print pid } } }'
}
export -f lib.primaryPid

######################################################################
function lib.relativize()
{
    local from="${1:?"Input parameter 'from' must be passed to 'function ${FUNCNAME[0]}()'"}"
    local to="${2:?"Input parameter 'to' must be passed to 'function ${FUNCNAME[0]}()'"}"
    local OIFS=$IFS

    from="${from//\/\//\/}"
    from="${from%/}"
    IFS=/
    dirs=("${from#/}")
    for to; do
        to="${to//\/\//\/}"
        to="${to%/}"
        local commonPrefix=/
        for d in "${dirs[@]}"; do
            case "$to/" in "$commonPrefix$d/"*) ;;
                *) break;;
            esac
            commonPrefix+="$d/"
        done
        local ancestor="${from#${commonPrefix%/}}"
        ancestor="${ancestor//[^\/]/}"
        ancestor="${ancestor//\//..\/}"
    done
    IFS=$OIFS
    echo -n "$ancestor${to#$commonPrefix}"
}
export -f lib.relativize

#############################################################################
function lib.removeProperty()
{
    local -r key="${1:?"Input parameter 'entry' must be passed to 'function ${FUNCNAME[0]}()'"}"
    local -r config_file="${2:?"Input parameter 'config_file' must be passed to 'function ${FUNCNAME[0]}()'"}"

    if grep -qE "^\s+${key}\s+=" "config_file" ; then
        sed -i "s|^$key=.*$||" "$config_file" 
    fi
}
export -f lib.removeProperty

#############################################################################
function lib.updatePropertyFile()
{
    local -r key="${2:?"Input parameter 'key' must be passed to 'function ${FUNCNAME[0]}()'"}"
    local -r val="${1:?"Input parameter 'val' must be passed to 'function ${FUNCNAME[0]}()'"}"
    local -r config_file="${3:?"Input parameter 'config_file' must be passed to 'function ${FUNCNAME[0]}()'"}"

    if [[ "$val" ]]; then
        if grep -qE "^\s+${key}\s+=" "config_file" ; then
            sed -i "s|^$key=.*$|$key=$val|" "$config_file" 
        else
            echo "$key=$val" >> "$config_file"
        fi
    fi
}
export -f lib.updatePropertyFile

#############################################################################
function lib.updateProperties()
{
    local -a in_array="${1:?"Input parameter 'in_array' must be passed to 'function ${FUNCNAME[0]}()'"}"
    local -r config_file="${2:?"Input parameter 'config_file' must be passed to 'function ${FUNCNAME[0]}()'"}"

    for entry in ${in_array[@]}; do
        lib.updatePropertyFile "${entry%%=*}" "${entry##*=}" "$config_file"
    done
}
export -f lib.updateProperties
