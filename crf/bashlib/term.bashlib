#!/bin/bash
#############################################################################
#
#   term-codes.bashlib
#
############################################################################# 

declare -xr BLANK=''
declare -xr RESET=0
declare -xr LF=$'\n'
declare -x LOG=term.log

declare -xr TERM_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/term" && pwd )"

#declare -xr TERM_CODES=( 'FOREGROUND' 'BACKGROUND' 'ATTR_SETTERS' 'ATTR_RESET' )

############################################################################# 
function term.FOREGROUND()
{
    local -r name=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    lib.getProperty "^${name}=" "${TERM_DIR}/${FUNCNAME[0]##*.}" 
}
export -f term.FOREGROUND

############################################################################# 
function term.BACKGROUND()
{
    local -r name=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    lib.getProperty "^${name}=" "${TERM_DIR}/${FUNCNAME[0]##*.}" 
}
export -f term.BACKGROUND

############################################################################# 
function term.ATTR_SETTERS()
{
    local -r name=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    lib.getProperty "^${name}=" "${TERM_DIR}/${FUNCNAME[0]##*.}" 
}
export -f term.ATTR_SETTERS

############################################################################# 
function term.ATTR_RESET()
{
    local -r name=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    lib.getProperty "^${name}=" "${TERM_DIR}/${FUNCNAME[0]##*.}" 
}
export -f term.ATTR_RESET

############################################################################# 
function term.codes()
{
    local -r code=${1:?"Input parameter 'code' must be passed to 'function ${FUNCNAME[0]}()'"}

    printf "\e[%dm" $code
}
export -f term.codes

############################################################################# 
function term.decode()
{
    local -r fg=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r bg=${2:-null}

    if [ "$bg" = null ]; then
        case "$fg" in
             task)     term.codes $(term.FOREGROUND 'lt_cyan');;
             info)     term.codes $(term.FOREGROUND 'lt_green');;
             warn)     term.codes $(term.FOREGROUND 'lt_yellow');;
            error)     term.codes $(term.FOREGROUND 'red');;
            reset)     term.codes $(term.ATTR_RESET 'all');;
                *)     term.codes $(term.FOREGROUND ${fg});;
        esac
    else
        printf "\e[%d;%dm" $(term.FOREGROUND $fg) $(term.BACKGROUND $bg)
    fi
}
export -f term.decode

#############################################################################
function term.header()
{
    local -r name=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r bars='+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'

    $LOG "${LF}${bars}${LF}" 'blue'
    $LOG "Building container: $( term.decode 'white' )${name}${LF}" 'lt_blue'
    $LOG "${bars}${LF}" 'blue'
}
export -f term.header

#############################################################################
function term.log()
{
    local -r msg=${1:?"Input parameter 'msg' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r msg_type=${2:?"Input parameter 'msg_type' must be passed to 'function ${FUNCNAME[0]}()'"}

    printf "%s%s%s" $( term.decode $msg_type ) "$msg" $( term.decode 'reset' )
}
export -f term.log
