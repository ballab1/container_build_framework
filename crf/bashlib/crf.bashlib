#!/bin/bash
#############################################################################
#
#   crf.bashlib: container_run_framework
#
#############################################################################


declare -xr CRF=/usr/local/crf/CRF.properties

function crf.__init()
{
    # this function is usually called from bin/init.libraries
    if [ ! -e "$CRF" ]; then
        local -r crf_base="$( dirname "$CRF" )" 
        mkdir -p "$crf_base"
        touch "$CRF"
        printf 'BASE=%s\n' "$crf_base" >> "$CRF"
        printf 'BIN=%s\n' "${crf_base}/bin" >> "$CRF"
        printf 'ENV=%s\n' "${crf_base}/environment" >> "$CRF"
        printf 'LIB=%s\n' "${crf_base}/bashlib" >> "$CRF"
        printf 'STARTUP=%s\n' "${crf_base}/startup" >> "$CRF"
        [ "$DEBUG_TRACE" = 0 ] || cat "$CRF"
    fi
}
export -f crf.__init

#############################################################################
function crf.BASE()
{
    lib.getProperty "^${FUNCNAME[0]##*.}=" "$CRF"
}
export -f crf.BASE

#############################################################################
function crf.BIN()
{
    lib.getProperty "^${FUNCNAME[0]##*.}=" "$CRF"
}
export -f crf.BIN

#############################################################################
function crf.ENV()
{
    lib.getProperty "^${FUNCNAME[0]##*.}=" "$CRF"
}
export -f crf.ENV

#############################################################################
function crf.LIB()
{
    lib.getProperty "^${FUNCNAME[0]##*.}=" "$CRF"
}
export -f crf.LIB

#############################################################################
function crf.STARTUP()
{
    lib.getProperty "^${FUNCNAME[0]##*.}=" "$CRF"
}
export -f crf.STARTUP
  
#############################################################################
function crf.makeScript()
{
    local file=${1:?'Input parameter "file" must be defined'}
    local tmpScript="/tmp/crfScript.$( basename "$file" )"

cat << EOF > "$tmpScript"
#!/bin/bash
[ ! -e "/usr/local/crf/bin/init.runtime" ] || source /usr/local/crf/bin/init.runtime
set -o errexit
set -o nounset
if [ "$DEBUG_TRACE" != "0" ]; then
    declare -p > "$tmpScript".env
    set -o verbose
fi
source "$file"
EOF
    cd /tmp
    chmod 755 "$file" "$tmpScript"
    if ( ! eval "$tmpScript" ) ; then
        $LOG ">>>>> issue while executing $( basename "$file" ) <<<<<${LF}" 'warn'
        exit 1
    fi
    rm "$tmpScript"
}
export -f crf.makeScript

#############################################################################
function crf.prepareEnvironment()
{
    local -a files=( $( lib.getFiles "$( crf.STARTUP )" ) )
    if [ ${#files[*]} -gt 0 ]; then

        # execute scritps in sorted order
        local -i todo=${#files[@]}
        local -i isdone=0
        for _name in $( printf "%s\n" ${!files[@]} | sort ); do
            local file="${files[$_name]}"
            chmod 755 "$file"
            $LOG "..executing ${file}${LF}" 'info'
            ( crf.makeScript "$file" )
            (( isdone++ )) || :
        done
        if [ $todo -ne $isdone ]; then
            $LOG "count before: $todo.  count after: $isdone.  files: ${files[@]}${LF}" 'info'
#            trap.die "failed to execute all scripts"
        else
            $LOG "Finished executing startup scripts${LF}" 'info'
        fi 
    fi
}
export -f crf.prepareEnvironment
