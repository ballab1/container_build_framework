#!/bin/bash
#############################################################################
#
#   crf.bashlib: container_run_framework
#
#############################################################################

: ${CRF_PROPERTIES_FILE:="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd -P )/CRF.properties"}
export CRF_PROPERTIES_FILE

#############################################################################
function crf.__init()
{
    local -r crf_base="${1:?"Input parameter 'crf' must be passed to 'function ${FUNCNAME[0]}()'"}"
    CRF_PROPERTIES_FILE="${crf_base}/CRF.properties"

    # this function is usually called from bin/init.libraries
    if [ ! -e "$CRF_PROPERTIES_FILE" ]; then
        mkdir -p "$crf_base"
        cat << EOF > "$CRF_PROPERTIES_FILE"
BASE="${crf_base}"
BIN="${crf_base}/bin"
ENV="${crf_base}/environment"
LIB="${crf_base}/bashlib"
ROOT="${CRF_LOCATION:-${crf}}"
STARTUP="${crf_base}/startup"
EOF
        [ "$DEBUG_TRACE" = 0 ] || cat "$CRF_PROPERTIES_FILE"
        [ -e "$(cbf.propertiesFile)" ] || term.log "runtime initialized\n"
    fi
#    term.__init
#    trap.__init
}
export -f crf.__init

#############################################################################
function crf.BASE()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( crf.propertiesFile )"
}
export -f crf.BASE

#############################################################################
function crf.BIN()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( crf.propertiesFile )"
}
export -f crf.BIN

#############################################################################
function crf.ENV()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( crf.propertiesFile )"
}
export -f crf.ENV

#############################################################################
function crf.LIB()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( crf.propertiesFile )"
}
export -f crf.LIB

#############################################################################
function crf.RT_ENVIRON()
{
    echo "$( crf.BIN )/rt.environment"
}
export -f crf.RT_ENVIRON

#############################################################################
function crf.RT_ENVIRON_PREFIX()
{
    echo 'export '
}
export -f crf.RT_ENVIRON_PREFIX

#############################################################################
function crf.STARTUP()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( crf.propertiesFile )"
}
export -f crf.STARTUP

#############################################################################
function crf.alreadyFixed()
{
    local -r dir="${1:?'Input parameter "dir" must be defined'}"
    local -r user=${2:-$(crf.currentUser)}

    [ -z "$user" ] && trap.die "Must specify a user when checking the 'fixUpCache'"

    local cacheFile=/tmp/fixUpCache
    touch "$cacheFile"

    local -r uid="$(lib.getUID "$user")"
    [ -z "$uid" ] && trap.die "Anable to find specified user '$user' on system, when checking the 'fixUpCache'"
    
    local -r previous="$(lib.getProperty "$dir" "$cacheFile")"
    if [ "$previous" ]; then
        if [ "$previous" = "$uid" ]; then
            term.log "    ${dir} already fixed up. Skipping request\n"
        else
            term.log "    ${dir} already fixed up. Skipping request to change to user: $(lib.getUserInfo "$user" 'extended')\n" 'lt_yellow'
        fi
        return 0
    fi
    
    # user not found. Add to cache
    lib.updatePropertyFile "$dir" "$uid" "$cacheFile"
    return 1
}
export -f crf.alreadyFixed

#############################################################################
function crf.copyFileToRuntime()
{
    local -r loc="${1^^:?"Input parameter 'loc' must be passed to 'function ${FUNCNAME[0]}()'"}"
    local -r file="${2:?"Input parameter 'file' must be passed to 'function ${FUNCNAME[0]}()'"}"
    local rtSha

    case "$loc" in
        BIN)         : ;;
        ENV)         : ;;
        LIB)         : ;;
        STARTUP)     : ;;
        *)  trap.die "Invalid runtime location '$loc' specified";;
    esac

    local -r rtFile="$( "crf.$loc" )/$( basename "$file" )"
    [ -e "$rtFile" ] && rtSha="$(sha256sum "$rtFile" | awk '{ print $1}')"


    # use input file if it exists, otherwise determine if file exists in coresponding '/usr/local/crf' folder
    local srcFile="$file"
    [ -e "$srcFile" ] || srcFile="$( cbf.BASE )/usr/local/crf/$( basename "$( "crf.$loc" )" )/$( basename "$file" )"


    # copy file to crf folder for use by runtime
    if [ -e "$srcFile" ]; then
        if [ "${rtSha:-}" ]; then
            # about to overrite an existing file, just return if it si same as current
            [ "$(sha256sum "$srcFile" | awk '{ print $1}')" == "$rtSha" ] && return
            trap.die "Attempt to overwrite file '$rtFile' will likely result in unintented consequences"
        fi

        echo "    copying $srcFile to $rtFile"
        # copy file
        cp "$srcFile" "$rtFile"
    else
        term.log "Attempt to copy non-existent file '$(basename "$srcFile")' to ${rtFile}\n" 'warning'
    fi
}
export -f crf.copyFileToRuntime

#############################################################################
function crf.currentUser()
{
    local user=''

    local __lib_savedOptions=$(set +o)
    [ "${user:-}" ] || user=$(lib.lookupId 'passwd' "$(crf.runtimeProperty 'USER')")
    [ "${user:-}" ] || [ -z "${USER:-}" ] || user=$(lib.lookupId 'passwd' "$USER")
    [ "${user:-}" ] || [ -z "${UID:-}" ] || user=$(lib.lookupId 'passwd' "$UID")
    [ "${user:-}" ] || user=0

    [ -z "$user" ] && trap.log "No current user identified"

    echo "$user"
}
export -f crf.currentUser

#############################################################################
function crf.fixupDirectory()
{
    local -r dir="${1:?'Input parameter "dir" must be defined'}"
    local -r user=${2:-$(crf.currentUser)}

    [ -z "$user" ] && trap.die "Must specify a user when fixing up a directory"

    if [ "${dir}" != '/' ]; then
        (crf.alreadyFixed "$dir" "$user") && return 0    # check/update cache of what has been 'fixed up'
        term.log "    Fixing up directory: ${dir},  for user: $(lib.getUserInfo "$user" 'extended')\n"
        [ -d "${dir}" ] || mkdir -p "${dir}"
        find "$dir" -type d ! -perm 777 -exec chmod 777 '{}' \; | :
        find "$dir" -type f ! -perm 666 -exec chmod a+rw '{}' \; | :
        # set owner to uid & login group for uid
        if [ "$user" != root ] && [ "$user" != 0 ]; then
            find "$dir" ! -user "$user" -exec chown "${user}:$(lib.getGroupOfUser "${user}")" '{}' \; | :
        fi
        return 0
    fi

    term.log "Attempt to fix up '${dir}' is not permitted.\n" 'warn'
    return 1
}
export -f crf.fixupDirectory

#############################################################################
function crf.prepareEnvironment()
{
    local -a files=( $( lib.getFiles "$( crf.STARTUP )" ) )
    if [ ${#files[*]} -gt 0 ]; then

        # execute scritps in sorted order
        local -a failedToRun=()
        for _name in $( printf "%s\n" ${!files[@]} | sort ); do
            crf.runScript "${files[$_name]}" || failedToRun+=( "${files[$_name]}" )
        done
        if [ ${#failedToRun[*]} -gt 0 ]; then
            term.log "Failed to run: ${#failedToRun[*]} out of ${#files[*]} startup scripts..\n" 'lt_gray'
            [ "$DEBUG_TRACE" = 0 ] || term.log "  files:\n$(printf "    %s\n"  "${files[@]}")\n" 'lt_gray'
#            trap.die "failed to execute all scripts"
        else
            term.log "Finished executing startup scripts\n" 'info'
        fi
    fi
    chmod a+x "/usr/local/bin/"*

}
export -f crf.prepareEnvironment

#############################################################################
function crf.propertiesFile()
{
    echo "${CRF_PROPERTIES_FILE:="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd -P )/CRF.properties"}"
}
export -f crf.propertiesFile

#############################################################################
function crf.removeFromRuntimeEnvironment()
{
    local -r key="${1:?"Input parameter 'entry' must be passed to 'function ${FUNCNAME[0]}()'"}"
    local -r envFile="$( crf.RT_ENVIRON )"

    if grep -qE "^.*\s+${key}=" "$envFile" ; then
        sed -i "s|^.* ${key}=.*$||" "$envFile"
    fi
}
export -f crf.removeFromRuntimeEnvironment

#############################################################################
function crf.runScript()
{
    local file=${1:?"Input parameter 'file' must be passed to 'function ${FUNCNAME[0]}()'"}
    local tmpScript="/tmp/crfScript.$( basename "$file" )"

    term.log "..executing ${file}\n" 'info'

cat << EOF > "$tmpScript"
#!/bin/bash

# Use the Unofficial Bash Strict Mode
set -o errexit
set -o nounset
set -o pipefail
IFS=\$'\n\t'

function sourcingMessage()
{
    local -r src=\$1
    local -r name="\$(basename "\$src")"
    local \dir="\$(dirname "\$src")"
    [ \$(( __envCount++ )) -eq 0 ] && printf "    sourcing:  "
    printf "\e[%dm%s\e[0m " 97 "\$name"
}


# load the associative array defitions
declare -i __envCount=0
declare -ra _files=( \$(lib.getFiles "\$(crf.ENV)") )
for _src in "$(printf "%s\n" "\${_files[@]}" | sort)"; do
    sourcingMessage "\${_src}" 
    source "\$_src"
done
[ \$__envCount -gt 0 ] && printf "\n"

cd "$WORKDIR"
source "$file"
EOF

    chmod 755 "$file"
    chmod 755 "$tmpScript"
    local -i status
    ( command "$tmpScript" ) && status=$? || status=$?
    if [ $status -ne 0 ]; then
        term.log "-------------------------------------------------------------\n"
        cat "$file"
        term.log "\n-------------------------------------------------------------\n"
        term.log ">>>>> issue while executing $( basename "$file" ) <<<<<\n" 'warn'
    fi
    rm  "$tmpScript"
    return $status
}
export -f crf.runScript

#############################################################################
function crf.runtimeProperty()
{
    local key="${1:?"Input parameter 'key' must be passed to 'function ${FUNCNAME[0]}()'"}"

    lib.getProperty "$(crf.RT_ENVIRON_PREFIX)${key}" "$(crf.RT_ENVIRON)"
}
export -f crf.runtimeProperty

#############################################################################
function crf.updateRuntimeEnvironment()
{
    local -a in_array=( $@ )
    local -r envFile="$( crf.RT_ENVIRON )"

    for line in ${in_array[@]}; do
        local key="${line%%=*}"
        if grep -qE "^.*\s+${key}=" "$envFile" ; then
            sed -i "s|^.* ${key}=.*$|$(crf.RT_ENVIRON_PREFIX)$line|" "$envFile"
        else
            echo "$(crf.RT_ENVIRON_PREFIX)$line" >> "$envFile"
        fi
    done
}
export -f crf.updateRuntimeEnvironment

