#!/bin/bash

# Use the Unofficial Bash Strict Mode
set -o errexit
set -o nounset
set -o pipefail
IFS=$'\n\t'

printf "\n\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n"
printf "%s starting.\n" "$CONTAINER_NAME"
printf "args: %s\n\n"  "$*"

source /usr/local/crf/bin/init.runtime

printf "\nrt.environment:"
for ln in "$(cat "$(crf.RT_ENVIRON)" | sort)"; do
    [ ${ln:0:6} = export ] && printf "    %s\n" "$(eval echo ${ln:7})"
done
printf "\n\n" 

declare -r config_entry="${CONTAINER_NAME}-setup"

if [[ "$1" = "${CONTAINER_NAME}" ]]; then
    # this is the primary (default) codepath invoked by the Dockerfile
    printf "\e[32m>>>>>>>> entering \e[33m'%s'\e[0m\n" "$1"

    # run the startup scripts defined in the framework
    if [ "$(id -u)" -eq 0 ]; then
        crf.prepareEnvironment
    elif [ "$( which sudo )" ]; then
        sudo -E "$0" "$config_entry"
    else
        printf "\e[35m>>>>>>>> Current user 'uid:$(id -u)' does not have super powers. Unable to configure environment\e[0m\n"
    fi

    declare -r tools=/usr/local/bin
    [ -e "${tools}/run.sh" ] || trap.die "No ${tools}/run.sh detected"
    cd ${WORKDIR}
    exec "${tools}/run.sh" "$@"

elif [[ "$1" = "$config_entry" && "$(id -u)" -eq 0 ]]; then
    # this codepath is invoked (from above) to perpare the runtime environment. User is 'root' so chmod & chown succeed
    printf "\e[32m>>>>>>>> entering \e[33m'%s'\e[0m\n" "$*"
    crf.prepareEnvironment

elif [ $# -gt 0 ]; then
    # this codepath is invoked when a user invokes the container using 'docker run'
    printf "\e[32m>>>>>>>> entering \e[33m'%s'\e[0m\n" 'custom'
    shift
    exec $@
fi
printf "\e[32m<<<<<<<< returning from \e[33m'%s'\e[0m\n" "$*"
