#!/bin/bash
declare startTm=$(date +%s) 

# Use the Unofficial Bash Strict Mode
set -o errexit
set -o nounset
set -o pipefail
IFS=$'\n\t'

[ "${1:-}" = *-setup ] || printf "\n\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
printf "\nargs: %s\n\n"  "$*"

source /usr/local/crf/bin/init.runtime

declare -r config_entry="${CONTAINER_NAME}-setup"


#  startup container
if [[ "$1" = "${CONTAINER_NAME}" ]]; then
    # this is the primary (default) codepath invoked by the Dockerfile
    crf.logEnvironment
    term.log '>>>>>>>> entering ' 'green'
    term.log "${*}\n" 'yellow'

    # run the startup scripts defined in the framework
    if [ "$(id -u)" -eq 0 ]; then
        crf.prepareEnvironment
    elif [ "$( which sudo )" ]; then
        sudo -E "$0" "$config_entry"
    else
        term.log ">>>>>>>> Current user 'uid:$(id -u)' does not have super powers. Unable to prepare environment" 'magenta'
    fi

    declare -r tools=/usr/local/bin
    [ -e "${tools}/run.sh" ] || trap.die "No ${tools}/run.sh detected"
    cd ${WORKDIR}
    term.log "\nFinished executing startup scripts after $(timer.fmtElapsed $(( $(timer.getTimestamp)  - startTm )) )\n\n" 'info' 
    exec sudo su -s '/bin/bash' -c "${tools}/run.sh $*" "$USER"

elif [[ "$1" = "$config_entry" && "$(id -u)" -eq 0 ]]; then
    # this codepath is invoked (from above) to perpare the runtime environment. User is 'root' so chmod & chown succeed
    term.log '>>>>>>>> entering ' 'green'
    term.log "${*}\n" 'yellow'
    crf.prepareEnvironment

elif [ $# -gt 0 ]; then
    # this codepath is invoked when a user invokes the container using 'docker run'
    crf.logEnvironment
    term.log '>>>>>>>> entering ' 'green'
    term.log 'custom' 'yellow'
    shift
    exec $@
fi
term.log '<<<<<<<< returning from ' 'green'
term.log "${*}\n" 'yellow'
