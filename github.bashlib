#!/bin/echo 'This script cannot be executabled directly. Please source from another script'

#----------------------------------------------------------------------------------------------
#
#  general 'github' scripts
#
#----------------------------------------------------------------------------------------------

export http_code

#----------------------------------------------------------------------------------------------
function github.DELETE()
{
    github.io --request DELETE "$@" || return 1
}
export -f github.DELETE

#----------------------------------------------------------------------------------------------
function github.GET()
{
    github.io --request GET "$@" || return 1
}
export -f github.GET

#----------------------------------------------------------------------------------------------
function github.HOST()
{
    if [ "${OPTS['host']:-}" ]; then
         echo "${OPTS['host']}"
    else
        echo "${_GITHUB_HOST:=$(lib.getHost "$( github.SERVER )" )}"
    fi
}
export -f github.HOST

#----------------------------------------------------------------------------------------------
function github.io()
{
    local -a args
    local headers response url
    local -i status=0
    local -A links
    local -a credentials

    mapfile -t credentials < <(credentials.get github)
    if [ "${DEBUG:-0}" -eq 0 ]; then
        credentials+=( '--silent' )
    else
        echo "curl $*" >&2
    fi

    headers=$(mktemp --tmpdir="${TMP_DIR:-/tmp}")
    args=( ${credentials[@]} '--dump-header' "$headers" "$@" )
    response=$(curl "${args[@]}") && status=$? || status=$?
    unset args[$((${#args[*]}-1))]

    while [ "$status" -eq 0 ]; do
        # Status: 200 OK
        http_code=$(head -1 "$headers" | sed -Ee 's|^\S+\s+(.+)\r?$|\1|')
        if [ "${http_code:0:1}" -gt 3 ]; then
            status=-1
            continue
        fi
        [ "${DEBUG:-0}" -ne 0 ] && (echo '----------'; echo "$response" ; echo '----------'; echo )  >&2
        echo -n "$response"

        #  Link: <https://api.github.com/search/code?q=addClass+user%3Amozilla&page=2>; rel="next", <https://api.github.com/search/code?q=addClass+user%3Amozilla&page=34>; rel="last"
        eval 'links=( $(github.splitLinks "$headers") )'
        url="${links['next']:-}"
        [ "${url:-}" ] || break

        response=$(curl "${args[@]}" "$url") && status=$? || status=$?
    done
    [ "${TMP_DIR:-}" ] || rm "$headers"
    [ "$status" -ne 0 ] || return 0


    # an error occurred
    local -r errors="$(echo "$response" | jq --compact-output --monochrome-output '.errors[]?' 2>/dev/null)"

    local curl_cmd=( 'curl' '--insecure' "$@" )
    echo
(   term.log "***ERROR: failure to complete GitHub request
    command:       $(printf '%s ' "${curl_cmd[@]}")
    error code:    $(jq --compact-output --monochrome-output '.code?' <<< "$errors")
    error message: $(jq --compact-output --monochrome-output '.message?' <<< "$errors")
    error details: $(jq --compact-output --monochrome-output '.detail?' <<< "$errors")
    http_code:     ${http_code:-}
    " 'warn' >&2
    )

    # check that 'term.log' was successful, otherwise, make sure something is echo'd
    [ $? -eq 0 ] || printg '%s:       %s \n    %s:    %s' 'command' "${curl_cmd[@]}" 'error code' "$errors" >&2

    return 1
}
export -f github.io

#----------------------------------------------------------------------------------------------
function github.orgRepoInfo()
{
    local -r org=${1:?}
    local -r repo=${2:?}

    github.GET "$(github.REST_API)/repos/${org}/${repo}" || return 1
}
export -f github.orgRepoInfo

#----------------------------------------------------------------------------------------------
function github.orgRepos()
{
    local -r org=${1:?}

    github.GET "$(github.REST_API)/orgs/${org}/repos" || return 1
}
export -f github.orgRepos

#----------------------------------------------------------------------------------------------
function github.orgTeams()
{
    local -r org=${1:?}

    github.GET "$(github.REST_API)/orgs/${org}/teams" || return 1
}
export -f github.orgTeams

#----------------------------------------------------------------------------------------------
function github.POST()
{
    github.io --request POST "$@" || return 1
}
export -f github.POST

#----------------------------------------------------------------------------------------------
function github.PROD()
{
    if [ "${OPTS['prod']:-}" ]; then
         echo "${OPTS['prod']}"
    else
        echo "${_GITHUB_PROD:=$(lib.getProperty 'PROD' "$( github.propertiesFile )")}"
    fi
}
export -f github.PROD

#----------------------------------------------------------------------------------------------
function github.propFile()
{
    echo "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/properties/$(basename "${BASH_SOURCE[0]%.*}").properties"
}

export GITHUB_PROPERTIES_FILE="${GITHUB_PROPERTIES_FILE:=$(github.propFile)}"

#----------------------------------------------------------------------------------------------
function github.propertiesFile()
{
    echo "${GITHUB_PROPERTIES_FILE:=$(github.propFile)}"
}
export -f github.propertiesFile

#----------------------------------------------------------------------------------------------
function github.PUT()
{
    github.io --request PUT "$@" || return 1
}
export -f github.PUT

#----------------------------------------------------------------------------------------------
function github.repoCollaborators()
{
    local -r org=${1:?}
    local -r repo=${2:?}

    github.GET "$(github.REST_API)/repos/${org}/${repo}/collaborators" || return 1
}
export -f github.repoCollaborators

#----------------------------------------------------------------------------------------------
function github.REST_API()
{
    if [ "${OPTS['rest_api']:-}" ]; then
         echo "${OPTS['rest_api']}"
    else
         echo "${_GITHUB_REST_API:=$(lib.getProperty 'REST_API' "$( github.propertiesFile )")}"
    fi
}
export -f github.REST_API

#----------------------------------------------------------------------------------------------
function github.SERVER()
{
    if [ "${OPTS['server']:-}" ]; then
         echo "${OPTS['server']}"
    else
        echo "${_GITHUB_SERVER:=$(lib.getProperty 'SERVER' "$( github.propertiesFile )")}"
    fi
}
export -f github.SERVER

#----------------------------------------------------------------------------------------------
function github.splitLinks()
{
    local -r headerFile=${1:?}

    grep -E '^Link:' "$headerFile" | sed -E 's|^Link:||'| awk '{print $0}' RS=','| sed -e 's| <|"|' -Ee 's|^(.*)>; rel=(.)(.*)\"\s*$|[\3]=\1\2|'
}
export -f github.splitLinks

#----------------------------------------------------------------------------------------------
function github.teamMembers()
{
    local -i teamid=${1:?}

    github.GET "$(github.REST_API)/teams/${teamid}/members" || return 1
}
export -f github.teamMembers

#----------------------------------------------------------------------------------------------
function github.teamRepos()
{
    local -ir teamid=${1:?}

    github.GET "$(github.REST_API)/teams/${teamid}/repos" || return 1
}
export -f github.teamRepos

#----------------------------------------------------------------------------------------------
function github.TEST()
{
    if [ "${OPTS['test']:-}" ]; then
         echo "${OPTS['test']}"
    else
        echo "${_GITHUB_TEST:=$(lib.getProperty 'TEST' "$( github.propertiesFile )")}"
    fi
}
export -f github.TEST

#----------------------------------------------------------------------------------------------
function github.USER()
{
    if [ "${OPTS['user']:-}" ]; then
         echo "${OPTS['user']}"
    else
        echo "${_GITHUB_USER:=$(lib.getProperty 'USER' "$( github.propertiesFile )")}"
    fi
}
export -f github.USER

#----------------------------------------------------------------------------------------------
function github.USERID()
{
    github.USER
}
export -f github.USERID

#----------------------------------------------------------------------------------------------
function github.userInfo()
{
    local -r user=${1:?}

    github.GET "$(github.REST_API)/users/${user}" || return 1
}
export -f github.userInfo

