#!/bin/bash

#############################################################################
function loadLibrary()
{
    local -r src=${1:?"Input parameter 'src' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r color=${2:-0}
    local -r name="$(basename "$src")"

    [ $(( __libCount++ )) -eq 0 ] && printf "    %s (\x1b[32m%s\x1b[0m:\x1b[35m%s\x1b[0m:\x1b[36m%s\x1b[0m):  " 'loading libraries' 'CBF' 'CRF' 'action_folder'
    printf "\x1b[%sm%s\x1b[0m " "$color" "$name"
    source "$src"
}

#############################################################################
function loadLibs()
{
    local -r path=${1:?"Input parameter 'path' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r color=${2:-0}

    [ "$path" ] || return 0
    [ -d "$path" ] || return 0
    local -ar files=( $(find "$path" -maxdepth 1 -mindepth 1 -name '*.bashlib') )
    [ ${#files[@]} -gt 0 ] || return 0

    local src
    for src in "${files[@]}" ; do
        if  libNotLoaded "$src" ; then
            loadLibrary "$src" "$color"
        fi
    done
}

#############################################################################
function libNotLoaded()
{
    local -r filename=${1:?"Input parameter 'filename' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r libname="$( basename "$filename" )"

    local -i status
    (grep -sq "$libname" "$libTracker" > /dev/null 2>&1 ) && status=$? || status=$?
    [ "$status" -ne 0 ] || return 1
    echo "$libname" >> "$libTracker"
    return 0
}

#############################################################################

: ${CBF_LOCATION:="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd -P )"}
: ${CRF_LOCATION:=/usr/local/crf}
: ${DEBUG_TRACE:=0}

# init our cache files
[ "${libTracker:-}" ] || declare -rx libTracker="${CBF_LOCATION}/bashlibs.loaded"
:> "$libTracker"
[ ! -e "${CBF_LOCATION}/CBF.properties" ] || rm "${CBF_LOCATION}/CBF.properties"
[ ! -e "${CRF_LOCATION}/CRF.properties" ] || rm "${CRF_LOCATION}/CRF.properties"


# load our bashlibs
declare -i __libCount=0
loadLibs "${CBF_LOCATION}/cbf/bashlib" 32                      # green
loadLibs "${CRF_LOCATION}/cbf/bashlib" 35                      # magenta
loadLibs "${CBF_LOCATION}/action_folders/00.bashlib" 36        # cyan


# init the framework
[ ! -e "${CBF_LOCATION}/cbf/bin/init.runtime" ] || source "${CBF_LOCATION}/cbf/bin/init.runtime"
cbf.__init "$CBF_LOCATION" "$CRF_LOCATION"


#  expected properties after initialization
##############################################################################
# echo "CBF.properties: $CBF_PROPERTIES_FILE"
#     CBF.properties: /tmp/container_build_framework/CBF.properties
# cat "$CBF_PROPERTIES_FILE"
#     CBFBASE=/tmp/container_build_framework
#     BIN=/tmp/container_build_framework/bin
#     LIB=/tmp/container_build_framework/cbf/bashlib
#     TEMPLATES=/tmp/container_build_framework/action.templates
#     BASE=/tmp/
#     ACTION=/tmp/action_folders
#     CRF_BASE=/tmp/container_build_framework/cbf
#     CRF_BIN=/usr/local/crf/bin
#     CRT_BASE=/usr/local/crf
# echo "CRF.properties: $CRF_PROPERTIES_FILE"
#     CRF.properties: /usr/local/crf/CRF.properties
# cat "$CRF_PROPERTIES_FILE"
#     BASE=/usr/local/crf
#     BIN=/usr/local/crf/bin
#     ENV=/usr/local/crf/environment
#     LIB=/usr/local/crf/bashlib
#     STARTUP=/usr/local/crf/startup


[ -e "$libTracker" ] && rm "$libTracker"
unset __libCount

# verify init was successful
[ "$( cbf.CBFBASE )" ] || trap.die 'error when setting up container build framework'
[ "$( cbf.CRT_BASE )" ] || trap.die 'error when setting up container build framework'
