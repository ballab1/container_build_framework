#!/bin/bash
#############################################################################
#
#   package.bashlib
#
#############################################################################

function package.checkIfInstalled()
{
    local -r todo=${1:?'Input parameter "todo" must be defined'}
    
    local installed=$(lib.intersect "$todo" "$( package.packageList )")
    [ -z "$installed" ] || trap.die "attempting to reinstall following packages: '$installed'"
}

#############################################################################
function package.install()
{
    local -r pkg=${1:?'Input parameter "pkg" must be defined'}
    
    IFS=$'\r\n'
    local -a contents=( $(< "$pkg") )
    $LOG "Installing ${pkg} - ${#contents[*]} lines read${LF}" 'task'

    if [ "${contents[1]:0:5}" = 'cmd: ' ]; then
        local comment="${contents[0]}"
        local cmd="${contents[1]:5}"
        contents=( ${contents[@]:2} )
        $LOG "..${comment}:  '${cmd} ${contents}'${LF}" 'info'
        eval $cmd $contents || $LOG "..issue while installing ${contents}${LF}" 'warn'
    else
        $LOG "..package file not formatted correctly ${pkg}${LF}" 'warn'
    fi
}

#############################################################################
function package.installTimezone()
{
    local -r tz=${1:?'Input parameter "tz" must be defined'}
    
    package.updateIndexes
    apk add --no-cache tzdata
    echo "$tz" > /etc/TZ
    cp "/usr/share/zoneinfo/$tz" /etc/timezone
    cp "/usr/share/zoneinfo/$tz" /etc/localtime
}

#############################################################################
function package.packageList()
{
    case "${CBF['os_id']}" in
        alpine)        apk info;;
        centos)        yum list | awk '{print $1 }';;
        fedora)        dnf --help;;
        ubuntu)        apt-get --help;;
    esac
}

#############################################################################
function package.runScripts()
{
    local -a files=${1:?'Input parameter "files" must be defined'}
    local -a filteredFiles=()

    for file in ${files[@]}; do
        local _extension="${file##*.}"
        [ "$_extension" != "${CBF['os_id']}" ] || filteredFiles+=( file )
    done

    lib.runScripts "${filteredFiles[*]}"
}

#############################################################################
function package.updateIndexes()
{
    case "${CBF['os_id']}" in
        alpine)        apk update;;
        centos)        yum update -y;;
        fedora)        dnf -y update && dnf clean all;;
        ubuntu)        apt-get update -y;;
    esac
}
