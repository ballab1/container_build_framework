#!/bin/bash
#############################################################################
#
#   cbf.bashlib: container_build_framework
#
#############################################################################


declare -Ax CBF

function cbf.__init()
{
    # this function is usually called from bin/init.libraries
    local -r lib_base=${1:?'Input parameter "lib_base" must be defined'}
    local -r dbglvl=${2:?'Input parameter "dbglvl" must be defined'}

    if [ "${#CBF[@]}" -eq 0 ]; then
        CBF=()
        local cbf_base="$( cd "$( dirname "$lib_base" )" && pwd )"
        CBF['cbfbase']="$cbf_base"
        CBF['bin']="${cbf_base}/bin"
        CBF['lib']="$lib_base"
        CBF['templates']="${cbf_base}/action.templates"

        CBF['base']="$( cd "$( dirname "$cbf_base" )" && pwd )"
        CBF['action']="${CBF['base']}/action_folders"

        CBF['debug']="${dbglvl:-0}"
        if [ -e /etc/os-release ]; then
            CBF['os_id']=$( cat /etc/os-release | grep -e '^ID=' | awk -F'=' '{ print $2 }' )
        else
            CBF['os_id']=windows
        fi

        CBF['crf_base']="${cbf_base}/crf"
        CBF['crf_bin']="${CBF['crf_base']}/bin"
        CBF['crt_base']="/usr/local/crf"
        
        
       #now parse some info from our Dockerfile
       #ENTRYPOINT cmd is used
       #Both VOLUME and USER are used
    fi
}

#############################################################################
function cbf.buildContainer()
{
    local -r name=${1:?'Input parameter "name" must be defined'}
    local -r debug_trace=${2:-0}
    local -r timezone=${3:-null}
    
    # list of 'notice, directory, action' to perform
    local -A steps=( ['00.setup']='cbf.runScripts'
                     ['01.packages']='package.runScripts'
                     ['02.users_groups']='uidgid.check'
                     ['03.downloads']='download.getPackages'
                     ['04.applications']='cbf.runScripts'
                     ['05.customizations']='cbf.runScripts'
                     ['06.permissions']='cbf.runScripts'
                     ['07.cleanup']='cbf.runScripts'
                   )
    
    term.header "${name^^}"
    if [ "$timezone" = null ]; then
        [ ! -e /etc/TZ ] || export TZ="$( cat /etc/TZ )"
    else
        export TZ="$timezone"
        lib.updateRuntimeEnvironment 'TZ'
        package.updateIndexes
        package.installTimezone "$timezone"
    fi


    # iterate through list
    for dir in $( printf "%s\n" "${!steps[@]}" | sort ); do
        [ "$dir" != '07.cleanup' ] || [ "$DEBUG_TRACE" = 0 ] || continue

        # get array of files in directory
        local -a files=( $( lib.getFiles "${CBF['action']}/$dir" ) )
        files+=( $( lib.getFiles "${CBF['templates']}/$dir" ) )
        [ ${#files[*]} -gt 0 ] || continue

        # decode action
        local action="${steps[$dir]}"
        # get .info file, & read for 'notice'
        local info="${CBF['action']}/$dir/.info"
        [ -e "$info" ] || info="${CBF['templates']}/$dir/.info"
        local notice="$( lib.readFile "${CBF['templates']}/$dir/.info" )"

        # show notice if there are files to process
        $LOG "${notice}${LF}" 'task'

        # perform required actions
        if [[ "$timezone" = null && "$dir" = '01.packages' ]]; then
            package.updateIndexes
        fi
        
        # perform desired action
        echo "$action: (unsorted)"
        printf "    %s\n" "${files[@]}"
        "$action" "${files[*]}"
    done
}

#############################################################################
function cbf.makeScript()
{
    local file=${1:?'Input parameter "file" must be defined'}
    local tmpScript="/tmp/runScript.$( basename "$file" )"

cat << EOF > "$tmpScript"
#!/bin/bash
[ ! -e "${CBF['bin']}/init.libraries" ] || source "${CBF['bin']}/init.libraries" "${CBF['debug']}"
[ "${CBF['debug']}" = "0" ] || set -o verbose  
set -o errexit
set -o nounset
cd /tmp
source "$file"
EOF
    chmod 755 "$tmpScript"
    if ! eval "$tmpScript" ; then
        $LOG ">>>>> issue while executing $( basename "$file" ) <<<<<${LF}" 'warn'
        trap.die "unable to execute $file"
    fi
}

#############################################################################
function cbf.runScripts()
{
    local -a files=${1:?'Input parameter "files" must be defined'}
    local SAVED_OPTIONS=$(set +o)

    # create a hash to sort the files by name & remove any templates that have been overridden
    local -A ahash
    set +o nounset
    for file in ${files[@]}; do
        local name="$( basename "$file" )"
        local _name="${name//./_}"
        [[ -n "${ahash[$_name]}"  &&  "${ahash[$_name]}" =~ */action.templates/* ]] && continue
        ahash[$_name]="$file"
    done
    eval "$SAVED_OPTIONS"

    # execute scritps in sorted order
    local -i todo=${#ahash[@]}
    local -i isdone=0
    for _name in $( printf "%s\n" ${!ahash[@]} | sort ); do
        local file="${ahash[$_name]}"
        chmod 755 "$file"
        $LOG "..executing ${file}${LF}" 'info'
        ( cbf.makeScript "$file" )
        (( isdone++ )) || :
    done
    if [ $todo -ne $isdone ]; then
        echo "count before: $todo.  count after: $isdone.  hash: ${ahash[@]}"
        trap.die "failed to execute all scripts"
    fi
}

#############################################################################