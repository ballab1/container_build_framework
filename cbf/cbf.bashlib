#!/bin/bash
#############################################################################
#
#   cbf.bashlib: container_build_framework
#
#############################################################################


declare -x CBF=/tmp/CBF.properties

function cbf.__init()
{
    # this function is usually called from bin/init.libraries
    local -r lib_base=${1:?'Input parameter "lib_base" must be defined'}
set -x
    if [ ! -e "$CBF" ]; then
        touch "$CBF"
        local cbf_base="$( cd "$( dirname "$lib_base" )" && pwd )"
        printf 'CBFBASE=%s\n' "$cbf_base" >> "$CBF"
        printf 'BIN=%s\n' "${cbf_base}/bin" >> "$CBF"
        printf 'LIB=%s\n' "$lib_base" >> "$CBF"
        printf 'TEMPLATES=%s\n' "${cbf_base}/action.templates" >> "$CBF"
        local -r _base="$( cd "$( dirname "$cbf_base" )" && pwd )"
        printf 'BASE=%s\n' "$_base" >> "$CBF"
        printf 'ACTION=%s\n' "${_base}/action_folders" >> "$CBF"
        local -r crf_base="${cbf_base}/crf"
        printf 'CRF_BASE=%s\n' "$crf_base" >> "$CBF"
        printf 'CRF_BIN=%s\n' "${crf_base}/bin" >> "$CBF"
        printf 'CRT_BASE=%s\n' "/usr/local/crf" >> "$CBF"
        
   #     [ "$DEBUG_TRACE" == 0 ] || cat "$CBF"
       cat "$CBF"
       #now parse some info from our Dockerfile
       #ENTRYPOINT cmd is used
       #Both VOLUME and USER are used
    fi
}
export -f cbf.__init

#############################################################################
function cbf.CBFBASE()
{
    local id="^${FUNCNAME[0]##*.}="
    grep -e '$id' "$CBF" | sed -e "s/${id}//"
}
export -f cbf.CBFBASE

#############################################################################
function cbf.BIN()
{
    local id="^${FUNCNAME[0]##*.}="
    grep -e '$id' "$CBF" | sed -e "s/${id}//"
}
export -f cbf.BIN

#############################################################################
function cbf.LIB()
{
    local id="^${FUNCNAME[0]##*.}="
    grep -e '$id' "$CBF" | sed -e "s/${id}//"
}
export -f cbf.LIB

#############################################################################
function cbf.TEMPLATES()
{
    local id="^${FUNCNAME[0]##*.}="
    grep -e '$id' "$CBF" | sed -e "s/${id}//"
}
export -f cbf.TEMPLATES

#############################################################################
function cbf.BASE()
{
    local id="^${FUNCNAME[0]##*.}="
    grep -e '$id' "$CBF" | sed -e "s/${id}//"
}
export -f cbf.BASE

#############################################################################
function cbf.ACTION()
{
    local id="^${FUNCNAME[0]##*.}="
    grep -e '$id' "$CBF" | sed -e "s/${id}//"
}
export -f cbf.ACTION

#############################################################################
function cbf.CRF_BASE()
{
    local id="^${FUNCNAME[0]##*.}="
    grep -e '$id' "$CBF" | sed -e "s/${id}//"
}
export -f cbf.CRF_BASE

#############################################################################
function cbf.CRF_BIN()
{
    local id="^${FUNCNAME[0]##*.}="
    grep -e '$id' "$CBF" | sed -e "s/${id}//"
}
export -f cbf.CRF_BIN

#############################################################################
function cbf.CRT_BASE()
{
    local id="^${FUNCNAME[0]##*.}="
    grep -e '$id' "$CBF" | sed -e "s/${id}//"
}
export -f cbf.CRT_BASE

#############################################################################
function cbf.buildContainer()
{
    local -r name=${1:?'Input parameter "name" must be defined'}
    local -r debug_trace=${2:-0}
    local -r timezone=${3:-null}
    
    # list of 'notice, directory, action' to perform
    local -A steps=( ['00.setup']='cbf.runScripts'
                     ['01.packages']='package.runScripts'
                     ['02.users_groups']='uidgid.check'
                     ['03.downloads']='download.getPackages'
                     ['04.applications']='cbf.runScripts'
                     ['05.customizations']='cbf.runScripts'
                     ['06.permissions']='cbf.runScripts'
                     ['07.cleanup']='cbf.runScripts'
                   )
    
    term.header "${name^^}"
    if [ "$timezone" = null ]; then
        [ ! -e /etc/TZ ] || export TZ="$( cat /etc/TZ )"
    else
        export TZ="$timezone"
        lib.updateRuntimeEnvironment 'TZ'
        package.updateIndexes
        package.installTimezone "$timezone"
    fi


    # iterate through list
    for dir in $( printf "%s\n" "${!steps[@]}" | sort ); do
        [ "$dir" != '07.cleanup' ] || [ "$DEBUG_TRACE" = 0 ] || continue

        # get array of files in directory
        local -a files=( $( lib.getFiles "$( cbf.ACTION )/$dir" ) )
        files+=( $( lib.getFiles "$( cbf.TEMPLATES )/$dir" ) )
        [ ${#files[*]} -gt 0 ] || continue

        # decode action
        local action="${steps[$dir]}"
        # get .info file, & read for 'notice'
        local info="$( cbf.action )/$dir/.info"
        [ -e "$info" ] || info="$( cbf.TEMPLATES )/$dir/.info"
        local notice="$( lib.readFile "$( cbf.TEMPLATES )/$dir/.info" )"

        # show notice if there are files to process
        $LOG "${notice}${LF}" 'task'

        # perform required actions
        if [[ "$timezone" = null && "$dir" = '01.packages' ]]; then
            package.updateIndexes
        fi
        
        # perform desired action
        if [ "$DEBUG_TRACE" != 0 ]; then
            echo "$action: (unsorted)"
            printf "    %s\n" "${files[@]}"
        fi
        "$action" "${files[*]}"
    done
}
export -f cbf.buildContainer

#############################################################################
function cbf.makeScript()
{
    local file=${1:?'Input parameter "file" must be defined'}
    local tmpScript="/tmp/cbfScript.$( basename "$file" )"

cat << EOF > "$tmpScript"
#!/bin/bash
if [ "$DEBUG_TRACE" != "0" ]; then
    declare -p > "$tmpScript".env
    set -o verbose
fi
set -o errexit
set -o nounset
declare -p
source "$file"
EOF
    cd /tmp
    chmod 755 "$file" "$tmpScript"
    if ( ! command "$tmpScript" ) ; then
        $LOG ">>>>> issue while executing $( basename "$file" ) <<<<<${LF}" 'warn'
        trap.die "unable to execute $file"
    fi
    set +o xtrace
}
export -f cbf.makeScript

#############################################################################
function cbf.runScripts()
{
    local -a files=${1:?'Input parameter "files" must be defined'}
    local SAVED_OPTIONS=$(set +o)

    # create a hash to sort the files by name & remove any templates that have been overridden
    local -A ahash
    set +o nounset
    for file in ${files[@]}; do
        local name="$( basename "$file" )"
        local _name="${name//./_}"
        [[ -n "${ahash[$_name]}"  &&  "${ahash[$_name]}" =~ */action.templates/* ]] && continue
        ahash[$_name]="$file"
    done
    eval "$SAVED_OPTIONS"

    # execute scritps in sorted order
    local -i todo=${#ahash[@]}
    local -i isdone=0
    for _name in $( printf "%s\n" ${!ahash[@]} | sort ); do
        local file="${ahash[$_name]}"
        chmod 755 "$file"
        $LOG "..executing ${file}${LF}" 'info'
        ( cbf.makeScript "$file" )
        (( isdone++ )) || :
    done
    if [ $todo -ne $isdone ]; then
        echo "count before: $todo.  count after: $isdone.  hash: ${ahash[@]}"
        trap.die "failed to execute all scripts"
    fi
}
export -f cbf.runScripts

#############################################################################