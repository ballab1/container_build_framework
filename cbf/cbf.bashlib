#!/bin/bash
#############################################################################
#
#   cbf.bashlib: container_build_framework
#
#############################################################################

declare -Ax CBF=()


function cbf.__init()
{
    if [ "${#CBF[@]}" -eq 0 ]; then
        local cbf_base="$( cd "$( dirname "$lib_base" )" && pwd )"
        CBF['bin']="${cbf_base}/bin"
        CBF['lib']="$lib_base"
        CBF['templates']="${cbf_base}/action.templates"

        CBF['base']="$( cd "$( dirname "$cbf_base" )" && pwd )"
        CBF['action']="${CBF['base']}/action_folders"
    fi
}

#############################################################################
function cbf.buildContainer()
{
    local -r name=${1:?'Input parameter "name" must be defined'}
    local -r timezone=${2:-null}
    
    
    # list of 'notice, directory, action' to perform
    local -A steps=( ['01.packages']='cbf.runScripts'
                     ['02.users_groups']='uidgid.check'
                     ['03.downloads']='download.getPackages'
                     ['04.applications']='cbf.runScripts'
                     ['05.customizations']='cbf.runScripts'
                     ['06.permissions']='cbf.runScripts'
                     ['07.cleanup']='cbf.runScripts'
                   )
    
    term.header "$name"
    if [ "$timezone" = null ]; then
        [ -e /etc/TZ ] && export TZ="$( cat /etc/TZ )"
    else
        export TZ="$timezone"
        package.installTimezone "$timezone"
    fi


    # iterate through list
    for dir in $( echo "${!steps[@]}" | sort ); do
        [ ! -d "{CBF['action']}/$dir" ] && continue

        # get array of files in directory
        local -a files=( $( cbf.getFiles "${CBF['action']}/$dir" ) )
        [ ${#files[*]} = 0 ] && continue

        # decode action
        local action="${steps[$dir]}"
        # get .info file, & read for 'notice'
        local info="${CBF['action']}/$dir/.info"
        [ -e "$info" ] || info="${CBF['templates']}/$dir/.info"
        local notice="$( cbf.readFile "${CBF['templates']}/$dir/.info" )"

        # show notice if there are files to process
        $LOG "${notice}${LF}" 'task'

        # perform required actions
        if [[ "$timezone" = null && "$dir" = '02.packages' ]]; then
            package.updateIndexes
        fi
        "$action" "${files[*]}"
    done
}

#############################################################################
function cbf.getFiles()
{
    local -r dir=${1:?'Input parameter "dir" must be defined'}

    IFS=$'\r\n'
    [ -d "${dir}" ] && find "${dir}"  -maxdepth 1 -and ! -name '.*' -and  -type f -or -type l | sort
}

#############################################################################
function cbf.indirectReference()
{
    local -r hash=${1:?'Input parameter "hash" must be defined'}
    local -r key=${2:?'Input parameter "key" must be defined'}
    set +o nounset
    local -r default="$3"

    local val=$( eval "echo \${$hash[$key]}" )
    [ -z "$val" ] && val="$default"
    echo "$val"
    set -o nounset
}

#############################################################################
function cbf.readFile()
{
    local -r file=${1:?'Input parameter "file" must be defined'}
    
    if [ -e "$file" ]; then
        cat $file
    else
        echo 'File does not exist'
    fi
}

######################################################################
function cbf.relativize()
{
    local from="$1"
    local to="$2"

    from=${from//\/\//\/}
    from=${from%/}
    IFS=/
    dirs=(${from#/})
    for to; do
        to=${to//\/\//\/}
        to=${to%/}
        local commonPrefix=/
        for d in "${dirs[@]}"; do
            case "$to/" in "$commonPrefix$d/"*) ;;
                *) break;;
            esac
            commonPrefix+="$d/"
        done
        local ancestor="${from#${commonPrefix%/}}"
        ancestor=${ancestor//[^\/]/}
        ancestor=${ancestor//\//..\/}
    done
    echo -n "$ancestor${to#$commonPrefix}"
}

#############################################################################
function cbf.runScripts()
{
    local -a files=${1:?'Input parameter "files" must be defined'}

    for file in ${files} ; do
        chmod 755 "$file"
        $LOG "..executing ${file}${LF}" 'info'
        cd /tmp
        eval "$file" || $LOG ">>>>> issue while executing $( basename "$file" ) <<<<<${LF}" 'warn'
    done
}

#############################################################################
