#!/bin/bash
#############################################################################
#
#   cbf.bashlib: container_build_framework
#
#############################################################################


declare -Ax CBF

function cbf.__init()
{
    # this function is usually called from bin/init.libraries
    local -r lib_base=${1:?'Input parameter "lib_base" must be defined'}
    if [ "${#CBF[@]}" -eq 0 ]; then
        CBF=()
        local cbf_base="$( cd "$( dirname "$lib_base" )" && pwd )"
        CBF['cbfbase']="$cbf_base"
        CBF['bin']="${cbf_base}/bin"
        CBF['lib']="$lib_base"
        CBF['templates']="${cbf_base}/action.templates"

        CBF['base']="$( cd "$( dirname "$cbf_base" )" && pwd )"
        CBF['action']="${CBF['base']}/action_folders"

        CBF['debug']="${DEBUG_TRACE:-0}"
        if [ -e /etc/os-release ]; then
            CBF['os_id']=$( cat /etc/os-release | grep -e '^ID=' | awk -F'=' '{ print $2 }' )
        else
            CBF['os_id']=windows
        fi

        CBF['crf_base']="${cbf_base}/crf"
        CBF['crf_bin']="${CBF['crf_base']}/bin"
        CBF['crt_base']="/usr/local/crf"
    fi
}

#############################################################################
function cbf.buildContainer()
{
    local -r name=${1:?'Input parameter "name" must be defined'}
    local -r timezone=${2:-null}
    
    # list of 'notice, directory, action' to perform
    local -A steps=( ['01.packages']='cbf.runScripts'
                     ['02.users_groups']='uidgid.check'
                     ['03.downloads']='download.getPackages'
                     ['04.applications']='cbf.runScripts'
                     ['05.customizations']='cbf.runScripts'
                     ['06.permissions']='cbf.runScripts'
                     ['07.cleanup']='cbf.runScripts'
                   )
    
    term.header "${name^^}"
    if [ "$timezone" = null ]; then
        [ -e /etc/TZ ] && export TZ="$( cat /etc/TZ )"
    else
        export TZ="$timezone"
        package.installTimezone "$timezone"
    fi


    # iterate through list
    for dir in $( printf "%s\n" "${!steps[@]}" | sort ); do
        [ "$dir" = '07.cleanup' ] && [ "$DEBUG_TRACE" != 0 ] && continue
        [ ! -d "${CBF['action']}/$dir" ] && continue

        # get array of files in directory
        local -a files=( $( lib.getFiles "${CBF['action']}/$dir" ) )
        files+=( $( lib.getFiles "${CBF['templates']}/$dir" ) )
        [ ${#files[*]} = 0 ] && continue

        # decode action
        local action="${steps[$dir]}"
        # get .info file, & read for 'notice'
        local info="${CBF['action']}/$dir/.info"
        [ -e "$info" ] || info="${CBF['templates']}/$dir/.info"
        local notice="$( lib.readFile "${CBF['templates']}/$dir/.info" )"

        # show notice if there are files to process
        $LOG "${notice}${LF}" 'task'

        # perform required actions
        if [[ "$timezone" = null && "$dir" = '01.packages' ]]; then
            package.updateIndexes
        fi
        
        # copy definition files to environment folder
        if [ "$dir" = '02.users_groups' ] || [ "$dir" = '03.downloads' ]; then
            for file in ${files[@]} ; do
                lib.copyFileToRuntimeEnvironment "$file"
            done 
        fi
        
        # perform desired action
        "$action" "${files[*]}"
    done
}

#############################################################################
function cbf.makeScript()
{
    local file=${1:?'Input parameter "file" must be defined'}
    local tmpScript="/tmp/runScript.$( basename "$file" )"

cat << EOF > "$tmpScript"
#!/bin/bash
[ -e "${CBF['bin']}/init.libraries" ] && source "${CBF['bin']}/init.libraries" "${CBF['lib']}" 
[ -e "${CRF['bin']}/init.runtime" ] && source "${CRF['bin']}/init.runtime" 
[ "${CBF['debug']}" != "0" ] && set -o verbose  
set -o errexit
set -o nounset
cd /tmp
source "$file"
EOF
    chmod 755 "$tmpScript"
    if ! eval "$tmpScript" ; then
        $LOG ">>>>> issue while executing $( basename "$file" ) <<<<<${LF}" 'warn'
        [ "${CBF['debug']}" = "2" ] || trap.die "unable to execute $file"
    fi
}

#############################################################################
function cbf.runScripts()
{
    local -a files=${1:?'Input parameter "files" must be defined'}

    # create a hash to sort the files by name & remove any templates that have been overriden
    local -A hash
    set +o nounset
    for file in ${files[@]}; do
        local name="$( basename "$file" )"
        local _name="${name//./_}"
        [[ -n "${hash[$_name]}"  &&  "${hash[$_name]}" =~ */action.templates/* ]] && continue
        hash[$_name]="$file"
    done
    set +o xtrace

    # execute scritps in sorted order
    while read -r _name ; do
        local file="${hash[$_name]}"
        chmod 755 "$file"
        $LOG "..executing ${file}${LF}" 'info'
        cbf.makeScript "$file"
    done< <( printf "%s\n" ${!hash[@]} | sort )
}

#############################################################################