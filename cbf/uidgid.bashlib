#!/bin/bash
#############################################################################
#
#   uidgid.bashlib
#
#############################################################################

function uidgid.check()
{
    local -a files=${1:?"Input parameter 'files' must be passed to 'function ${FUNCNAME[0]}()'"}

    for file in ${files} ; do
        crf.copyFileToRuntime 'ENV' "$file"
        chmod 755 "$file"
        term.log "..executing ${file}\n" 'info'
        ( uidgid.runScript "$file" )
    done
}
export -f uidgid.check

#############################################################################
function uidgid.createUserAndGroup()
{
    local -r file=${1:?"Input parameter 'file' must be passed to 'function ${FUNCNAME[0]}()'"}

    source "$file"

    #strip path & prefix from file to get name
    local name="$( basename "$file" )"
    name="${name//[0-9]/}"
    name="${name#.}"

    local user="$( lib.indirectReference 'user' "$name" )"
    local uid="$( lib.indirectReference 'uid' "$name" )"
    local group="$( lib.indirectReference 'group' "$name" )"
    local gid="$( lib.indirectReference 'gid' "$name" )"
    local homedir="$( lib.indirectReference 'home' "$name" )"
    local shell="$( lib.indirectReference 'shell' "$name" )"

    if [ -z "$user" ] || [ -z "$uid" ] || [ -z "$group" ] || [ -z "$gid" ]; then
        trap.die "Invalid user/group specified in '${file}'; user:[${user}], uid:[${uid}], group:[$group], gid:[${gid}]"
    fi

    local wanted=$( printf '%s:%s' $group $gid )
    local nameMatch=$( getent group "${group}" | awk -F ':' '{ printf "%s:%s",$1,$3 }' )
    local idMatch=$( getent group "${gid}" | awk -F ':' '{ printf "%s:%s",$1,$3 }' )
    term.log "INFO: group/gid (${wanted}):  is currently (${nameMatch})/(${idMatch})\n" 'info'

    if [[ $wanted != $nameMatch  ||  $wanted != $idMatch ]]; then
        if [[ "$idMatch" ]]; then
            local oldName=$( getent group "${gid}" | cut -d: -f1 )
            term.log "renaming group:  ${oldName} to ${group}\n" 'info'
            /usr/sbin/groupmod --new-name "$group" "$oldName"
        elif [[ "$nameMatch" ]]; then
            local oldId=$( getent group "${group}" | cut -d: -f3 )
            term.log "renaming group:  ${oldId} to ${gid}\n" 'info'
            /usr/sbin/groupmod --gid ${gid} "$group"
        else
            term.log "create group:  ${group}\n" 'info'
            /usr/sbin/groupadd --gid "${gid}" "${group}"
        fi
    fi


    wanted=$( printf '%s:%s' $user $uid )
    nameMatch=$( getent passwd "${user}" | awk -F ':' '{ printf "%s:%s",$1,$3 }' )
    idMatch=$( getent passwd "${uid}" | awk -F ':' '{ printf "%s:%s",$1,$3 }' )
    term.log "INFO: user/uid (${wanted}):  is currently (${nameMatch})/(${idMatch})\n" 'info'

    if [[ $wanted != $nameMatch  ||  $wanted != $idMatch ]]; then
        if [[ -z "$idMatch"  &&  -n "$nameMatch" ]]; then
            term.log "update user:  ${user}\n" 'info'
            if [ "$homedir" ]; then
                [ -d "$homedir" ] || mkdir -p "$homedir"
                /usr/sbin/usermod --home "$homedir" --uid "${uid}" --gid "${gid}" --shell "${shell}" "${user}"
            else
                /usr/sbin/usermod --uid "${uid}" --gid "${gid}" --shell "${shell}" "${user}"
            fi
        else
            term.log "create user: ${user}\n" 'info'
            [[ "$nameMatch"  &&  $wanted != $nameMatch ]] && userdel "$( getent passwd ${user} | cut -d: -f1 )"
            [[ "$idMatch"    &&  $wanted != $idMatch ]]   && userdel "$( getent passwd ${uid} | cut -d: -f1 )"
            if [ "$homedir" ]; then
                [ -d "$homedir" ] || mkdir -p "$homedir"
                /usr/sbin/useradd --home-dir "$homedir" --uid "${uid}" --gid "${gid}" --shell "${shell}" "${user}"
            else
                /usr/sbin/useradd --no-create-home --uid "${uid}" --gid "${gid}" --shell "${shell}" "${user}"
            fi
        fi
    fi
}
export -f -f uidgid.createUserAndGroup

#############################################################################
function uidgid.runScript()
{
    local -a file=${1:?"Input parameter 'file' must be passed to 'function ${FUNCNAME[0]}()'"}
    source /usr/local/crf/bin/init.runtime

    eval uidgid.createUserAndGroup "$file" || term.log "..*** issue while executing $( basename "$file" ) ***\n" 'warn'
}
export -f uidgid.check
