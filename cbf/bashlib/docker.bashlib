#!/bin/bash

#----------------------------------------------------------------------------------------------
#
#   docker.bashlib; basic functions to get info about docker containers
#

#----------------------------------------------------------------------------------------------
function docker.baseImage()
{
    local ref="${1:?}"

    if [[ "$ref" = *@sha256:* ]]; then
        echo "${ref%@*}"

    else
        local registry="$(registry.SERVER)"
        ref="${ref#${registry}}"
        echo "${registry}${ref%:*}"
    fi
}
export -f docker.baseImage

#----------------------------------------------------------------------------------------------
function docker.clean()
{
    local dockerRootDir="$(docker system info 2>/dev/null | grep 'Docker Root Dir:' | sed -E 's|^.+:\s+||')"

    local -a collection
    local -i blocksUsedBefore="$(df "${dockerRootDir}/volumes" | awk '{if (NR==2) {print $3}}')"

    # remove all containers which are stopped along with their associated volumes
    collection=()
    collection+=( $(docker ps --all --quiet --filter "status=dead" --format "{{.Names}}") )
    collection+=( $(docker ps --all --quiet --filter "status=exited" --format "{{.Names}}") )
    if [ "${#collection[*]}" -gt 0 ]; then
        printf "Deleting %d exited containers\n" "${#collection[*]}"
        docker rm --volumes "${collection[@]}"
    fi


    local fingerprint image
    # remove any 'dangling' images  (those with <none> in name)
    collection=( $(docker images --quiet --filter "dangling=true") )

    # locate all images tagged as ':tmp'
    for image in $(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep -s ':tmp' ||:); do
        collection+=( $image )
    done

    # locate all images tagged with a computed fingerprint
    for image in $(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep -v '<none>' ||:); do
        fingerprint=$(docker inspect "$image" | jq --compact-output --monochrome-output --raw-output '.[].Config.Labels."container.fingerprint"?') ||:
        [ -z "${fingerprint:-}" ] && continue
        [ "$fingerprint" != "$(docker.tag "$image")" ] && continue
        collection+=( $image )
    done

    # locate all images with '<none>' as Repository
    for image in $((docker images | grep -s '<none>'  ||:) | awk '{if($1 == "<none>"){print $3}}'); do
        fingerprint=$(docker inspect "$image" | jq --compact-output --monochrome-output --raw-output '.[].Config.Labels."container.fingerprint"?') ||:
        [ -z "${fingerprint:-}" ] && continue
        collection+=( $image )
    done

    if [ "${#collection[*]}" -gt 0 ]; then
        mapfile -t collection < <(printf '%s\n' ${collection[@]} | sort -u)   # remove duplicates

        # Allow any images associated with running containers
        local -r processes="$(for i in $(docker ps --all --format '{{.Image}}'); do docker inspect $i 2>/dev/null | jq --compact-output --monochrome-output --raw-output '.[].RepoTags|unique[]' ||: ;done)"
        local -i idx=${#collection[*]}
        while [ $(( idx-- )) -gt 0 ]; do
            image=${collection[$idx]}
            [[ $(grep -c "$image" <<< "${processes}") -gt 0 ]] && unset collection[$idx]
        done

        # Finally, remove all the images we found
        if [ "${#collection[*]}" -gt 0 ]; then
            printf "Deleting %d dangling/temporary images\n" "${#collection[*]}"
            docker rmi ${collection[@]} ||:
        fi
    fi


    # get list of volumes associated with running containers
    collection=()
    for volume in $(docker ps --all --quiet); do
        collection+=( $(docker inspect "$volume" | jq --compact-output --monochrome-output --raw-output '.[].Mounts[].Name | select(.)' | sort -u) )
    done
    [ "${#collection[*]}" -gt 0 ] && printf "Detected %d mounts associated with running containers\n" "${#collection[*]}"


    # remove directories associated with unused volumes
    if [ "${#collection[*]}" -gt 0 ]; then
        local -i deletions=0
        local volumes="$( printf "%s\n" "${collection[@]}" )"
        for dir in $(sudo find "${dockerRootDir}/volumes" -mindepth 1 -maxdepth 1 -type d); do
            (grep "$dir" <<< "$volumes") && continue
            sudo rm -rf "$dir"
            (( deletions++ )) ||:
        done
        [ $deletions -gt 0 ] && printf "Deleted %d directories associated with volumes no longer in use\n" $deletions
    fi


    # show results
    (
        local -i blocksUsedAfter="$(df "${dockerRootDir}/volumes" | awk '{if (NR==2) {print $3}}')"
        local -i recovered=$(( blocksUsedBefore - blocksUsedAfter ))
        [ $recovered -le 0 ] || printf "Recovered %d kb\n" $recovered
        echo
    ) >&2
}
export -f docker.clean

#----------------------------------------------------------------------------------------------
function docker.imageExists()
{
    local -r image=${1:?}
    shift
    local -r candidateTags=( $@ )

    local -i status
    local imageRepo imageTag repo tag
    imageRepo="$(docker.baseImage "$image")"
    imageTag="$(docker.tag "$image")"
    repo="$(docker.repo "$image")"


    if [ "${#candidateTags[*]}" -eq 1 ]; then
        local fingerprint="${candidateTags[0]}"
        local -a images
        if [ "$(docker images --format '{{.Repository}}:{{.Tag}}' --filter "reference=$image")" ] &&
           [ "$fingerprint" = "$(docker inspect "$image" | jq --compact-output --monochrome-output --raw-output '.[].Config.Labels."container.fingerprint"' )" ]; then
            echo "${image} has not changed"
            return 0
        fi

        # appears not to be same image, look for any other image with the required fingerprint
        # search local images for exact match
        mapfile -t images < <(curl --silent \
                                   --unix-socket /var/run/docker.sock http://localhost/images/json \
                              | jq --compact-output --monochrome-output --raw-output \
                                    ".[]|select(.Labels.\"container.fingerprint\" == \"$fingerprint\").RepoTags[]?" \
                              | grep -v '<none>:<none>' || :)
        if [ ${#images[*]} -gt 0 ]; then
            if [ $(printf '%s\n' "${images[@]}" | grep -cs "$image") -gt 0 ]; then
                echo "${image} has not changed"
                return 0
            fi

            # found image by a different 'name:tag'
            echo "found ${image} with a different name. Retagging."
            docker tag "${images[0]}" "$image"
            return 0
        fi
    else

        # search local for match
        for tag in "$imageTag" "${candidateTags[@]}"; do
            if [ "$(docker images --format '{{.Repository}}:{{.Tag}}' --filter "reference=${imageRepo}:$tag")" ]; then
                [ "$image" = "${imageRepo}:$tag" ] || docker tag "${imageRepo}:$tag" "$image"
                echo "found ${image} locally"
                return 0
            fi
        done
    fi


    # no image found locally. Need to locate best match from registry


    # search for match across all tags in registry
    for tag in "$imageTag" "${candidateTags[@]}"; do
        docker pull "${imageRepo}:$tag"  &> /dev/null || continue

        if [ "$tag" = "$imageTag" ] && [ "${#candidateTags[*]}" -eq 1 ]; then

            # when "${#candidateTags[*]}"n equals 1, we are looking for a specific fingerprint
            if [ "$fingerprint" != "$(docker inspect "${imageRepo}:$tag" | jq --compact-output --monochrome-output --raw-output '.[].Config.Labels."container.fingerprint"' )" ]; then
                # wrong image, try again
                docker rmi "${imageRepo}:$tag" &> /dev/null
                continue
            fi

        elif [ "$image" != "${imageRepo}:$tag" ]; then
            docker tag "${imageRepo}:$tag" "$image"
            docker rmi "${imageRepo}:$tag" &> /dev/null
        fi
        echo "pulled ${image} from registry"
        return 0
    done

    # nothing found. do not echo anything
    return 0
}
export -f docker.imageExists

#----------------------------------------------------------------------------------------------
function docker.isRunning()
{
    if [ -S /run/docker.sock ]; then
        curl --silent --unix-socket /run/docker.sock GET http://127.0.0.1/ping &> /dev/null && return 0
    fi
    return 1
}
export -f docker.isRunning

#----------------------------------------------------------------------------------------------
function docker.networks()
{
    local -a networks=( $( docker network ls | grep 'default' | awk "{ print \$1 }" ) )
    docker network inspect "${networks[@]}" \
    | jq --compact-output --monochrome-output --raw-output ".[].Containers|.[]|[.IPv4Address + \" : \" + .Name]|.[]" \
    | sort -t "." -k 4g
}
export -f docker.networks

#----------------------------------------------------------------------------------------------
function docker.pushRetained()
{
    local -ri isRetainedImage="${1:?}"
    shift
    local -ra images=( "$@" )
    [ ${#images[*]} -eq 0 ] && return 1

    local imageList=$(docker images --format '{{.Repository}}:{{.Tag}}')

    local image
    local -a allImages=()
    for image in "${images[@]}"; do
        grep -q "$image" <<< "$imageList" || continue
        allImages+=( "$image" )
        [ "${isRetainedImage:-0}" -gt 0 ] || continue
        local fp="$(docker inspect "$image" | jq --compact-output --monochrome-output --raw-output '.[].Config.Labels."container.fingerprint"?')"
        if [ "${fp:-}" ]; then
            allImages+=( "$(docker.baseImage "$image"):$fp" )
            docker tag "$image" "$(docker.baseImage "$image"):$fp"  > /dev/null 2>&1 ||: # ignore errors
        fi
    done

    [ "${#allImages[*]}" -gt 0 ] || trap.die 'no valid images found'
    # strip out duplicate entries (so we don't push stuff twice)
    local -a imagesToPush
    mapfile -t imagesToPush < <(printf '%s\n' "${allImages[@]}" | sort -u)

    local attempt
    local -i wasPushed
    for image in "${imagesToPush[@]}"; do
        wasPushed=0
        for attempt in {0..2}; do
            term.log "    Pushing ${image}"'\n' 'lt_blue'
            docker push "$image" >/dev/null && wasPushed=1 && break
            echo 'retrying...'
        done
        [ "$wasPushed" -eq 0 ] && trap.die "Failed to push $image"
    done

    for image in "${imagesToPush[@]}"; do
        local -i wasTagged=0
        for inp in "${images[@]}"; do
            [ "$inp" = "$image" ] && wasTagged=1 && break
        done
        [ "$wasTagged" -eq 1 ] && continue
        term.log "    Removing temporary image: ${image}"'\n' 'lt_blue'
        docker rmi "$image" >/dev/null
    done
}
export -f docker.pushRetained

#----------------------------------------------------------------------------------------------
function docker.repo()
{
    local ref="${1:?}"

    local registry="$(registry.SERVER)"
    ref="${ref#${registry}}"

    if [[ "$ref" = *@sha256:* ]]; then
        echo "${ref%@*}"

    else
        echo "${ref%:*}"
    fi
}
export -f docker.repo

#----------------------------------------------------------------------------------------------
function docker.services()
{
    local -r dc_yaml="${1:?'no docker-compose.yml specified'}"

    lib.yamlToJson "$dc_yaml" | jq --compact-output --monochrome-output --raw-output '.services|keys[]?'
}
export -f docker.services

#----------------------------------------------------------------------------------------------
function docker.showProcessReport()
{
    local -r opts=${1:-}

    local fmt='table {{.Names}}\t{{.ID}}\t{{.Size}}\t{{.Status}}\t{{.RunningFor}}'
    [ "$opts" ] || fmt="$fmt"'\t{{.Ports}}'

    # show process report
    echo
    mapfile -t containers < <(docker ps --format "$fmt")
    echo -e "\e[97m${containers[0]}\e[0m"
    unset containers[0]
    printf '%s\n' "${containers[@]}" | sort
}
export -f docker.showProcessReport

#----------------------------------------------------------------------------------------------
function docker.tag()
{
    local ref="${1:?}"

    if [[ "$ref" = *@sha256:* ]]; then
       echo "${ref#*@}"

    else
        local registry="$(registry.SERVER)"
        ref="${ref#${registry}}"
        echo "${ref##*:}"
    fi
}
export -f docker.tag

#----------------------------------------------------------------------------------------------
