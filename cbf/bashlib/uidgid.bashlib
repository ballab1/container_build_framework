#!/bin/bash
#############################################################################
#
#   uidgid.bashlib
#
#############################################################################

function uidgid.check()
{
    local -a files=( "$@" )

    [ ${#files[*]} -gt 0 ] || return
    for file in "${files[@]}" ; do
        crf.copyFileToRuntime 'ENV' "$file"
        (eval uidgid.createUserAndGroup "$file") || term.log "..*** issue while executing $( basename "$file" ) ***\n" 'yellow'
    done
}
export -f uidgid.check

#############################################################################
function uidgid.createUserAndGroup()
{
    local -r file=${1:?"Input parameter 'file' must be passed to 'function ${FUNCNAME[0]}()'"}

    [ -f "$file" ] || trap.die 'must specify a valid file'

    term.log "..executing ${file}\n" 'info'

    source "$(crf.BIN)/init.runtime"
    source "$file"

    #strip path & prefix from file to get name
    local name="$( basename "$file" )"
    name="${name//[0-9]/}"
    name="${name#.}"

    local user="$( lib.indirectReference 'user' "$name" )"
    local uid="$( lib.indirectReference 'uid' "$name" )"
    local group="$( lib.indirectReference 'group' "$name" )"
    local gid="$( lib.indirectReference 'gid' "$name" )"
    local homedir="$( lib.indirectReference 'home' "$name" )"
    local shell="$( lib.indirectReference 'shell' "$name" )"

    if [ -z "$user" ] || [ -z "$uid" ] || [ -z "$group" ] || [ -z "$gid" ]; then
        trap.die "Invalid user/group specified in '${file}'; user:[${user}], uid:[${uid}], group:[$group], gid:[${gid}]"
    fi

    local wanted="$( printf '%s:%s' "$group" "$gid" )"
    local nameMatch="$( lib.getGroupInfo "$group" 'extended' )"
    local idMatch="$( lib.getGroupInfo "$gid" 'extended' )"
    term.log "    INFO: group/gid (${wanted}):  is currently (${nameMatch})/(${idMatch})\n"

    if [ "$wanted" != "$nameMatch" ] || [ "$wanted" != "$idMatch" ]; then
        if [ "$idMatch" ]; then
            local oldName=$( lib.getGroupInfo "$gid" )
            term.log "    renaming group:  ${oldName} to ${group}\n" 'info'
            groupmod --new-name "$group" "$oldName"
        elif [ "$nameMatch" ]; then
            local oldId=$( lib.getGID "$group" )
            term.log "    renaming group:  ${oldId} to ${gid}\n" 'info'
            groupmod --gid "$gid" "$group"
        else
            term.log "    create group:  ${group}\n" 'info'
            groupadd --gid "$gid" "$group"
        fi
    fi


    wanted="$( printf '%s:%s' "$user" "$uid" )"
    nameMatch="$( lib.getUserInfo "$user" 'extended' )"
    idMatch="$( lib.getUserInfo "$uid" 'extended' )"
    term.log "    INFO: user/uid (${wanted}):  is currently (${nameMatch})/(${idMatch})\n"

    if [ "$wanted" != "$nameMatch" ] || [ "$wanted" != "$idMatch" ]; then
        if [ -z "$idMatch" ] && [ "$nameMatch" ]; then
            term.log "    update user:  ${user}\n" 'info'
            if [ "$homedir" ]; then
                [ -d "$homedir" ] || mkdir -p "$homedir"
                usermod --home "$homedir" --uid "$uid" --gid "$gid" --shell "$shell" "$user"
            else
                usermod --uid "$uid" --gid "$gid" --shell "$shell" "$user"
            fi
        else
            term.log "    create user: ${user}\n" 'info'
            [ "$nameMatch" ] && [ "$wanted" != "$nameMatch" ] && userdel "$( lib.getUserInfo "$user" )"
            [ "$idMatch" ]   && [ "$wanted" != "$idMatch" ]   && userdel "$( lib.getUserInfo "$uid" )"
            if [ "$homedir" ]; then
                [ -d "$homedir" ] || mkdir -p "$homedir"
                useradd --home-dir "$homedir" --uid "$uid" --gid "$gid" --shell "$shell" "$user"
            else
                useradd --no-create-home --uid "$uid" --gid "$gid" --shell "$shell" "$user"
            fi
        fi
    fi
}
export -f -f uidgid.createUserAndGroup

#############################################################################
function uidgid.verify()
{
    local -a files=( $(find "$(crf.ENV)" -type f ! -name '.*') )

    [ ${#files[*]} -gt 0 ] || return
    local -a uids=()
    for file in "${files[@]}" ; do
        local name="$( basename "$file" )"
        name="${name//[0-9]/}"
        name="${name#.}"

        source "$file"
        uids+=( "$( lib.indirectReference 'uid' "$name" )" )
    done
    [ ${#files[*]} -eq $(printf "%s\n" "${uids[@]}" | sort -u | wc -l) ] || trap.die "\n"
}
export -f uidgid.verify

