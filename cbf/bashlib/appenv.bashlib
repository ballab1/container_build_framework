#!/bin/echo 'This script cannot be executabled directly. Please source from another script'

#----------------------------------------------------------------------------------------------
#
#   appenv.bashlib; basic functions to load our libraries
#
#----------------------------------------------------------------------------------------------
function appenv.capture()
{
  file="${1:-"/tmp/$(basename "${BASH_SOURCE[0]}")"}"
  :> "$file"
  exec 2> >(tee -ai "$file" >&2) > >(tee -ai "$file")
}

#----------------------------------------------------------------------------------------------
function appenv.cmdError()
{
    local msg="${1:'ERROR: invalid command options'}"

    # shellcheck disable=SC2154
    OPTS['quiet']=1
    # shellcheck disable=SC2154
    OPTS['debug']=2
    appenv.showArgs
    term.elog '\n'"$msg"'\n' 'error'
    exit 1
}

#----------------------------------------------------------------------------------------------
function appenv.cmdLineArgs()
{
    local -a optsJSON=()
    local -i status=0

    [ "${DEBUG:-0}" -ne 0 ] && OPTS['debug']=$DEBUG
    # shellcheck disable=SC2143
    [ -z "$(set +o|grep 'set -o xtrace')" ] || OPTS['debug']=1

    while [ "${1:-}" ]; do
        case "${1,,}" in
            help|-h|--help)
                if [ "${OPTS['cmd']:-}" ]; then
                    while [ $# -gt 0 ]; do
                        shift
                    done
                else
                    shift
                    [ $# -ge 1 ] && ARGS=( "$@" )
                fi
                appenv.usage
                OPTS['cmd']='appenv.usage'
                return 0;;

            -c|--credentials)
                [[ $# -le 2 || $2 = -* ]] && trap.die 'no credentials file specified!'
                # shellcheck disable=SC2154
                OPTS['credentials']="$2"
                shift 2;;

            --debug)
                OPTS['debug']=1
                shift;;

            -n|--nocache)
                # shellcheck disable=SC2154
                OPTS['cached']=1
                shift;;

            -q|-quiet|--quiet)
                OPTS['quiet']=1
                shift;;

            -u|--user)
                [[ $# -le 2 || $2 = -* ]] && trap.die 'no user specified'
                # shellcheck disable=SC2154
                OPTS['user']="$2"
                shift 2;;

            *)
                if [ "${1:0:1}" != '-' ]; then
                    local optsFile="${PROGRAM_DIR}/help.${LIB_NAME}/cmdOptions.json"
                    if [ -s "$optsFile" ] && [ "${#optsJSON[*]}" -eq 0 ]; then
                        mapfile -t optsJSON < <(jq -ser '.[]|select(.name|ascii_downcase == "'"${1,,}"'")?|to_entries[]|@sh "OPTS[\(.key)]=\(.value)"' "$optsFile" ||:)
                        # shellcheck disable=SC2181
                        if [ $? -eq 0 ]; then
                            for opt in "${optsJSON[@]}";do
                                eval "$opt"
                            done
                            if [ "${OPTS['shift']:-0}" -gt 0 ];then
                                shift "${OPTS['shift']}"
                                unset OPTS['shift']
                                continue
                            fi
                        fi
                    fi
                elif [ "$(type -t "${LIB_NAME}.cmdLineArgs")" ]; then
                    "${LIB_NAME}.cmdLineArgs" "$@" && status=$? || status=$?
                    [ "$status" -ne 0 ] && [ -z "${OPTS['cmd']:-}" ] && trap.die 'invalid option/argument'
                    if [ "${OPTS['shift']:-0}" -gt 0 ]; then
                        shift "${OPTS['shift']}"
                        unset OPTS['shift']
                        continue
                    fi
                fi
                ARGS+=( "$1" )
                shift;;

        esac
    done

    if [ -z "${OPTS['cmd']:-}" ]; then
        [ "${#ARGS[*]}" -gt 0 ] && term.elog "***ERROR: '${ARGS[0]}' invalid command line action provided\\n" 'error'
        appenv.usage
        exit 0
    fi

    [ "${OPTS['credentials']:-}" ] && export __SECRETS_FILE="${OPTS['credentials']}"
    [ "${OPTS['debug']:-0}" != 0 ] && export DEBUG=${OPTS['debug']:-0}



    # put args into our global
    [ $# -ge 1 ] && ARGS=( "$@" )

    if [ "${OPTS['argsCondition']:-}" ]; then
        eval "[[ ${OPTS['argsCondition']} ]]" || trap.die 'invalid arguments!'
    fi

    [ "${OPTS['cmd']:-}" ] || trap.die 'invalid arguments'

    return 0
}

#/----------------------------------------------------------------------------------------------
function appenv.elapsedTime()
{
    local -i elapsed=$(( $(date '+%s') - START_TIME ))
    if [ $elapsed -gt 2 ];then
        timer.fmtElapsed "$elapsed"
    fi
}

#----------------------------------------------------------------------------------------------
function appenv.initialize()
{
    OUTDIR="$(readlink -f "$(pwd)")"
    TMP_DIR="$(mktemp -d)"

    appenv.loader "${LIB_NAME}.main"
    trap appenv.onExit EXIT

    # shellcheck disable=SC1090
    [ -e "${PROGRAM_DIR}/${LIB_NAME}.bashlib" ] && source "${PROGRAM_DIR}/${LIB_NAME}.bashlib"
    [ "$(type -t "${LIB_NAME}.initialize")" ] && "${LIB_NAME}.initialize"

    # check our we have correct support

    #lib.checkAppVersion 'docker-compose' '1.18.0'
    #lib.checkAppVersion 'docker' '17.12.0'
    #lib.checkAppVersion 'jq' '1.5'
    #lib.checkAppVersion 'curl' '7.40.0'

    appenv.cmdLineArgs "$@"

    # order is to optimize resolution dependencies
    if [ "${OPTS['cached']:-0}" = 0 ]; then
        # shellcheck disable=SC2154
        [ "$(type -t "${LIB_NAME%%-*}.PROD")" ]     && OPTS['prod']="$("${LIB_NAME%%-*}.PROD")"
        # shellcheck disable=SC2154
        [ "$(type -t "${LIB_NAME%%-*}.SERVER")" ]   && OPTS['server']="$("${LIB_NAME%%-*}.SERVER")"
        # shellcheck disable=SC2154
        [ "$(type -t "${LIB_NAME%%-*}.URL")" ]      && OPTS['url']="$("${LIB_NAME%%-*}.URL")"
        # shellcheck disable=SC2154
        [ "$(type -t "${LIB_NAME%%-*}.HOST")" ]     && OPTS['host']="$("${LIB_NAME%%-*}.HOST")"
        # shellcheck disable=SC2154
        [ "$(type -t "${LIB_NAME%%-*}.REST_API")" ] && OPTS['rest_api']="$("${LIB_NAME%%-*}.REST_API")"
        # shellcheck disable=SC2154
        [ "$(type -t "${LIB_NAME%%-*}.USER")" ]     && OPTS['user']="$("${LIB_NAME%%-*}.USER")"
        # shellcheck disable=SC2154
        [ "$(type -t "${LIB_NAME%%-*}.TEST")" ]     && OPTS['test']="$("${LIB_NAME%%-*}.TEST")"
    fi
    return 0
}

#----------------------------------------------------------------------------------------------
function appenv.loader()
{
    readonly START_TIME="$(date '+%s')"

    local fn="${1:?}"

    export PROGRAM_DIR; readonly PROGRAM_DIR
    export PROGRAM_NAME; readonly PROGRAM_NAME
    export LOGFILE; readonly LOGFILE

    local top="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
    # is specified function already defined? : if it is, then libraries are already loaded
    if [ "$(env | grep -c "BASH_FUNC_${fn}%%")" -ne 0 ]; then
        TOP=/opt

    # look for libraries in common folders
    elif [ "$top" = '/usr/local/bin' ] && [ -e /usr/local/crf/bin/loadLibraries.sh ]; then
        # shellcheck disable=SC1091
        source /usr/local/crf/bin/loadLibraries.sh
        TOP="$(pwd)"

    else
        # look for libraries in current folder
        local dir
        for dir in '.' 'bin' 'bashlib' 'bin/bashlb'; do
            local libs="${top}/${dir}/loadLibraries.sh"
            if [ -e "$libs" ]; then
                # shellcheck disable=SC1090
                source "$libs"
                case "$dir" in
                    bin|bashlib)     TOP="$(readlink -f "${top}/..")";;
                    bin/bashlib)     TOP="$(readlink -f "${top}/../..")";;
                    *)               TOP="$top";;
                esac
                return
            fi
        done
    fi
    export TOP

    trap.die 'unable to locate libraries'
}

#----------------------------------------------------------------------------------------------
function appenv.onExit()
{
    local status=$?

    set +o errexit
    set +o nounset
    trap - EXIT
    trap - ERR
    trap - INT
    trap - PIPE

    [ "$(type -t "${LIB_NAME}.onExit")" ] && "${LIB_NAME}.onExit"

    local base="$(basename "$LOGFILE")"
    local -r logfile="${OUTDIR}/${base//.log}.$(date '+%g%m%d%H%M%S').log"

    if [ "${OUTDIR:-}" ]; then
        # save a copy of our log in our o/p folder
        [ -e "$LOGFILE" ] && mv "$LOGFILE" "$logfile"
    fi

    # remove our temp stuff
    [ "${TMP_DIR:-}" ] && [ "${TMP_DIR:-}" != '/' ] && [ -e "${TMP_DIR:-}" ] && rm -rf "${TMP_DIR:-}"


    local elapsed="$(appenv.elapsedTime)"
    [ -z "${elapsed:-}" ] || (echo -e '\nElapsed time: '"$elapsed" | tee -a "$logfile") >&2

    # strip color codes from log file
    [ "${DEBUG:-0}" -eq 0 ] && [ -f "$logfile" ] && sed -i -E -e 's|\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]||g'  "$logfile"

    return "$status"
}

#----------------------------------------------------------------------------------------------
function appenv.run()
{
    [ "${OPTS['quiet']:-0}" -eq 0 ] && term.elog "$(printf '%s ' "$@")"'\n' 'grey'
    eval "$@" > /dev/null
}

#----------------------------------------------------------------------------------------------
function appenv.showArgs()
{
    # show args
    {
        if [ "${OPTS['quiet']:-0}" -ne 0 ]; then
            echo
            echo "Starting process $$ at $(TZ=America/New_York date)"
            if [ "${OPTS['user']:-}" ]; then
                echo "user:               ${OPTS['user']}"
            else
                echo "user:               ${USERNAME:-${USER:-}}"
            fi

            # perform what was asked
            case ${OPTS['debug']:-0} in
                1)
                    echo
                    echo "cmd:    ${OPTS['cmd']:-}"
                    echo "oper:   ${OPTS['oper']:-}"
                    echo "action: ${OPTS['action']:-}"
                    ;;

                2)
                    echo
                    echo "${#OPTS[*]} options:"
                    local i
                    for i in "${!OPTS[@]}"; do
                       printf '    [%s]: %s\n' "$i" "${OPTS[$i]}"
                    done
                    echo "${#ARGS[*]} args:"
                    for i in "${ARGS[@]}"; do
                       printf '    %s\n' "$i"
                    done
                    echo
                    ;;

            esac
        fi
    } >&2
}

#----------------------------------------------------------------------------------------------
function appenv.usage()
{
    local context="${OPTS['cmd']:-}"
    if [[ "${OPTS['cmd']:-}" = *.catalogIterator ]]; then
        context="${OPTS['oper']:-}"
    fi
    [ -z "${context:-}" ] && context='usage'
    context="${context##*.}"


    local -r helpdir="${PROGRAM_DIR}/help.${LIB_NAME}"
    local contextHelp="${helpdir}/${context}.txt"
    [ -s "$contextHelp" ] || contextHelp="${helpdir}/${context,,}.txt"
    [ -s "$contextHelp" ] || contextHelp="${helpdir}/usage.txt"


    # show context sensitive help
    echo
    local optsFile="${PROGRAM_DIR}/help.${LIB_NAME}/cmdOptions.json"
    if [ "$contextHelp" = "${helpdir}/usage.txt" ] && [ -f "$optsFile" ]; then

        local -i program_name_len="${#PROGRAM_NAME}"
        echo "Usage:"
        local line="    ${PROGRAM_NAME} [ help"
        echo "$line"


        local -a lines=()
        local result opt
        while read -r result; do
            local -A params=()
            eval "params=( $result )"
            if [ "${params['longOpts']:-null}" != 'null' ]; then
                opt="${params['longOpts']//,/ }"
                local -a results
                # shellcheck disable=SC2001
                mapfile -t results < <(echo "${params['longOpts']}" | sed -e 's|,|\n|g')
                for opt in "${results[@]}"; do
                    params['name']="${params['name']} --${opt//:/}"
                    [ "${opt: -1}" = ':'  ] && params['name']="${params['name']} <arg>"
                done
            fi
            [ "${params['arg']:-null}" != 'null' ] && params['name']="${params['name']} ${params['arg']}"
            [ "${params['message']:-null}" = 'null' ] && params['message']=''
            lines+=( "$(printf '%s\n' "${params['name']}" "${params['message']}")" )
        done < <(jq -ser '.[]|"['"'"'name'"'"']='"'"'\(.name)'"'"' ['"'"'message'"'"']='"'"'\(.message)'"'"' ['"'"'longOpts'"'"']='"'"'\(.longOpts?)'"'"' ['"'"'arg'"'"']='"'"'\(.arg?)'"'"'"' "$optsFile")


        local name message
        local -i offset="$(( program_name_len + 5 ))"
        local space='                                                                                 '

        local -i max_param_len=0
        for result in "${lines[@]}"; do
            local -a results
            mapfile -t results < <(echo "$result")
            [ "$max_param_len" -lt "${#results[0]}" ] && max_param_len="${#results[0]}"
        done
        [ "$max_param_len" -lt 30 ] && max_param_len=30

        for result in "${lines[@]}"; do
            local -a results
            mapfile -t results < <(echo "$result")
            local len="$(( max_param_len - ${#results[0]} ))"
            printf '%s %s %s %s\n' " ${space::$offset}|" "${results[0]}" "${space::$len}" "$(eval "echo ${results[1]:-}")"
        done
        echo "${space::$offset}]"

        [ -s "$contextHelp" ] && envsubst < "$contextHelp"
    else
        [ -s "$contextHelp" ] || trap.die 'unable to locate usage information: '"$contextHelp"
        if [ -f "$optsFile" ]; then
            local msg="$(jq -ser '.[]|select(.name|ascii_downcase == "'"${context,,}"'").message' "$optsFile" 2>/dev/null ||:)"
            eval 'echo $msg'
        fi
        envsubst < "$contextHelp"
    fi
    echo

    trap - ERR
    exit 127
}

#----------------------------------------------------------------------------------------------
