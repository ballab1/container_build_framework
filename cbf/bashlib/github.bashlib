#!/bin/bash

#----------------------------------------------------------------------------------------------
#
#  general 'github' scripts
#
#----------------------------------------------------------------------------------------------

export http_code

#----------------------------------------------------------------------------------------------
function github.DELETE()
{
    github.io --request DELETE "$@" || return 1
}
export -f github.DELETE

#----------------------------------------------------------------------------------------------
function github.GET()
{
    github.io --request GET "$@" || return 1
}
export -f github.GET

#----------------------------------------------------------------------------------------------
function github.GITHUB_PROD()
{
    echo "${_GITHUB_PROD:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( github.propertiesFile )")}"
}
export -f github.GITHUB_PROD

#----------------------------------------------------------------------------------------------
function github.GITHUB_TEST()
{
    echo "${_GITHUB_TEST:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( github.propertiesFile )")}"
}
export -f github.GITHUB_TEST

#----------------------------------------------------------------------------------------------
function github.io()
{
    local -a args
    local headers response url
    local -i status=0
    local -A links
    local -ra credentials=( $(custom.credentials github) )

    headers=$(mktemp)
    args=( "${credentials[@]}" '--silent' '--dump-header' "$headers" "$@" )
    response=$(curl "${args[@]}") && status=$? || status=$?
    unset args[$[${#args[*]}-1]]

    while [ "$status" -eq 0 ]; do
        # Status: 200 OK
        http_code=$(head -1 "$headers" | sed -Ee 's|^\S+\s+(.+)\r?$|\1|')
        if [ "${http_code:0:1}" -gt 3 ]; then
            status=-1
            continue
        fi
        echo -n "$response"

        #  Link: <https://api.github.com/search/code?q=addClass+user%3Amozilla&page=2>; rel="next", <https://api.github.com/search/code?q=addClass+user%3Amozilla&page=34>; rel="last"
        eval links=( $(github.splitLinks "$headers") )
        url="${links['next']:-}"
        [ "${url:-}" ] || break

        response=$(curl "${args[@]}" "$url") && status=$? || status=$?
    done
    rm "$headers"
    [ "$status" -ne 0 ] || return 0


    # an error occurred
    local -r errors="$(echo "$response" | jq '.errors[]?')"

    local curl_cmd=( 'curl' '--insecure' "$@" )
    echo
(   term.log "***ERROR: failure to complete GitHub request
    command:       $(printf '%s ' "${curl_cmd[@]}")
    error code:    $(jq '.code?' <<< "$errors")
    error message: $(jq '.message?' <<< "$errors")
    error details: $(jq '.detail?' <<< "$errors")
    http_code:     ${http_code:-}
    " 'warn' >&2
    )

    # check that 'term.log' was successful, otherwise, make sure something is echo'd
    [ $? -eq 0 ] || echo "command:       $(printf '%s ' "${curl_cmd[@]}")\\n    error code:    $errors" >&2

    return 1
}
export -f github.io

#----------------------------------------------------------------------------------------------
function github.orgRepoInfo()
{
    local org=${1:?}
    local repo=${2:?}

    github.GET "$(github.REST_API)/repos/${org}/${repo}" || return 1
}
export -f github.orgRepoInfo

#----------------------------------------------------------------------------------------------
function github.orgRepos()
{
    local org=${1:?}

    github.GET "$(github.REST_API)/orgs/${org}/repos" || return 1
}
export -f github.orgRepos

#----------------------------------------------------------------------------------------------
function github.orgTeams()
{
    local org=${1:?}

    github.GET "$(github.REST_API)/orgs/${org}/teams" || return 1
}
export -f github.orgTeams

#----------------------------------------------------------------------------------------------
function github.POST()
{
    github.io --request POST "$@" || return 1
}
export -f github.POST

#----------------------------------------------------------------------------------------------
function github.propFile()
{
    echo "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/properties/$(basename "${BASH_SOURCE[0]%.*}").properties"
}

export GITHUB_PROPERTIES_FILE="${GITHUB_PROPERTIES_FILE:=$(github.propFile)}"

#----------------------------------------------------------------------------------------------
function github.propertiesFile()
{
    echo "${GITHUB_PROPERTIES_FILE:=$(github.propFile)}"
}
export -f github.propertiesFile

#----------------------------------------------------------------------------------------------
function github.PUT()
{
    github.io --request PUST "$@" || return 1
}
export -f github.PUT

#----------------------------------------------------------------------------------------------
function github.repoCollaborators()
{
    local org=${1:?}
    local repo=${2:?}

    github.GET "$(github.REST_API)/repos/${org}/${repo}/collaborators" || return 1
}
export -f github.repoCollaborators

#----------------------------------------------------------------------------------------------
function github.REST_API()
{
    echo "${_GITHUB_REST_API:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( github.propertiesFile )")}"
}
export -f github.REST_API

#----------------------------------------------------------------------------------------------
function github.SERVER()
{
    echo "${_GITHUB_SERVER:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( github.propertiesFile )")}"
}
export -f github.SERVER

#----------------------------------------------------------------------------------------------
function github.splitLinks()
{
    local -r headerFile=${1:?}

    grep -E '^Link:' "$headerFile" | sed -E 's|^Link:||'| awk '{print $0}' RS=','| sed -e 's| <|"|' -Ee 's|^(.*)>; rel=(.)(.*)\"\s*$|[\3]=\1\2|'
}
export -f github.splitLinks

#----------------------------------------------------------------------------------------------
function github.teamMembers()
{
    local -i teamid=${1:?}

    github.GET "$(github.REST_API)/teams/${teamid}/members" || return 1
}
export -f github.teamMembers

#----------------------------------------------------------------------------------------------
function github.teamRepos()
{
    local -i teamid=${1:?}

    github.GET "$(github.REST_API)/teams/${teamid}/repos" || return 1
}
export -f github.teamRepos

#----------------------------------------------------------------------------------------------
function github.USER()
{
    echo "${_GITHUB_USER:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( github.propertiesFile )")}"
}
export -f github.USER

#----------------------------------------------------------------------------------------------
function github.userInfo()
{
    local user=${1:?}

    github.GET "$(github.REST_API)/users/${user}" || return 1
}
export -f github.userInfo

