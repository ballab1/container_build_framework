#!/bin/echo 'This script cannot be executabled directly. Please source from another script'

#----------------------------------------------------------------------------------------------
#
#  general 'json' scripts
#

#----------------------------------------------------------------------------------------------
function json.encodeArray()
{
    local type=$(typeset -p "$1" | awk '{print $2}')
    if [ "$type" = '--' ]; then
        local ref="${1:?}"
        echo -n "$assoc"
        return
    fi

    # derefernce the ARRAY reference passed in
    local -a 'assoc=("${'"$1"'[@]}")'
    if [ "${#assoc[*]}" -gt 0 ]; then
        echo -n '['
        local val comma
        for val in "${assoc[@]}"; do
            [ -z "${comma:-}" ] || printf ','
            json.encodeField '--' "$val"
            comma=','
        done
        echo -n ']'
    fi
    return 0
}

#----------------------------------------------------------------------------------------------
function json.encodeBoolean()
{
    local boolVal="${1:-true}"

    [ "$boolVal" = true ] || boolVal='false'
    echo -n "$boolVal"
    return 0
}

#----------------------------------------------------------------------------------------------
function json.encodeField()
{
    local -r name=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    local -r val=${2:-}
    local -r mode=${3:-''}

    [ "$name" = '--' ] || printf '"%s":' "$name"
    if [ "${val:-null}" = 'null' ]; then
        echo -n 'null'

    else
        case "${mode,,}" in
            string)
                json.encodeString "$val"
                ;;

            boolean)
                json.encodeBoolean "$val"
                ;;

            integer)
                json.encodeInteger "$val"
                ;;

            array)
                json.encodeArray "${val:1:-1}"
                ;;

            hash)
                json.encodeHash "${val:1:-1}"
                ;;

            json)
                echo -n '{'"$val"'}'
                ;;

            *)
                if [[ "$val" =~ ^true|false$ ]]; then
                    json.encodeBoolean "$val"

                elif [[ "$val" =~ ^[0-9]+$ ]]; then
                    json.encodeInteger "$val"

                elif [[ "$val" = '{'*'}' ]]; then
                    json.encodeHash "${val:1:-1}"

                elif [[ "$val" = '['*']' ]]; then
                    json.encodeArray "${val:1:-1}"

                elif [[ "$val" = '"'*'":'* ]]; then
                    echo -n '{'"$val"'}'

                else
                    json.encodeString "$val"
                fi
                ;;
        esac
    fi
    return 0
}
export -f json.encodeField

#----------------------------------------------------------------------------------------------
function json.encodeHash()
{
    local type=$(typeset -p "${1:?}" | awk '{print $2}')
    if [ "$type" = '--' ]; then
        local ref="$1"
        echo -n "$!ref"
        return 0
    fi

    # dereference the ASSOCIATIVE ARRAY reference passed in
    local -a 'names=("${!'"$1"'[@]}")'
    local -a 'vals=("${'"$1"'[@]}")'
    local -A assoc=()
    for (( i=0; i<"${#names[*]}"; i++ )); do
        assoc[${names[$i]}]="${vals[$i]}"
    done

    # now encode the hash
    echo -n '{'
    if [ "${#assoc[*]}" -gt 0 ]; then
        local val comma
        for val in "${!assoc[@]}"; do
            [ -z "${comma:-}" ] || printf ','
            json.encodeField "$val" "${assoc[$val]}"
            comma=','
        done
    fi
    echo -n '}'
    return 0
}

#----------------------------------------------------------------------------------------------
function json.encodeInteger()
{
    local -r intVal=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    if [ "$intVal" = '0' ];then
        echo '0'
    else
        printf '%d' $(expr 0 + $intVal)
    fi
    return 0
}

#----------------------------------------------------------------------------------------------
function json.encodeString()
{
    local -r strVal=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    printf '"%s"' "${strVal//\"/\\\"}"
    return 0
}
