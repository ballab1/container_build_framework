#!/bin/bash
#############################################################################
#
#   lib.bashlib
#
#############################################################################
function lib.buildContainer()
{
    local -r name=${1:?'Input parameter "name" must be defined'}
    local -r timezone=${2:-null}
    export TOOLS=$( lib.getBase )
    
    
    # list of 'notice, directory, action' to perform
    local -A steps=( ['01']='01.packages lib.runScripts'
                     ['02']='02.users_groups uidgid.check'
                     ['03']='03.downloads download.getPackages'
                     ['04']='04.applications lib.runScripts'
                     ['05']='05.customizations lib.runScripts'
                     ['06']='06.permissions lib.runScripts'
                     ['07']='07.cleanup lib.runScripts'
                   )
    
    term.header "$name"
    if [ "$timezone" = null ]; then
        [ -e /etc/TZ ] && export TZ="$( cat /etc/TZ )"
    else
        export TZ="$timezone"
        package.installTimezone "$timezone"
    fi


    # iterate through list
    for id in $( echo "${!steps[@]}" | sort ); do

        # decode list entry into 'notice, directory, action'
        local -a info=( ${steps[$id]} )
        local dir="${info[0]}"
        local action="${info[1]}"
        local notice="$( lib.readFile "${TOOLS}/$dir/.Do Not Delete" )"

        # get array of files in directory
        local -a files=( $( lib.getFiles "${TOOLS}/$dir" ) )
        [ ${#files[*]} = 0 ] && continue

        # show notice if there are files to process
        $LOG "${notice//_/ }${LF}" 'task'

        # perform required actions
        if [[ "$timezone" = null && "$dir" = '02.packages' ]]; then
            package.updateIndexes
        fi
        "$action" "${files[*]}"
    done
}

#############################################################################
function lib.getBase()
{
    printf "%s" "$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"   
}

#############################################################################
function lib.getFiles()
{
    local -r dir=${1:?'Input parameter "dir" must be defined'}

    IFS=$'\r\n'
    [ -d "${dir}" ] && find "${dir}"  -maxdepth 1 -and ! -name '.*' -and  -type f -or -type l | sort
}

#############################################################################
function lib.indirectReference()
{
    local -r hash=${1:?'Input parameter "hash" must be defined'}
    local -r key=${2:?'Input parameter "key" must be defined'}
    set +o nounset
    local -r default="$3"

    local val=$( eval "echo \${$hash[$key]}" )
    [ -z "$val" ] && val="$default"
    echo "$val"
    set -o nounset
}

#############################################################################
function lib.readFile()
{
    local -r file=${1:?'Input parameter "file" must be defined'}
    
    if [ -e "$file" ]; then
        cat $file
    else
        echo 'File does not exist'
    fi
}

#############################################################################
function lib.runScripts()
{
    local -a files=${1:?'Input parameter "files" must be defined'}

    for file in ${files} ; do
        chmod 755 "$file"
        $LOG "..executing ${file}${LF}" 'info'
        cd /tmp
        eval "$file" || $LOG ">>>>> issue while executing $( basename "$file" ) <<<<<${LF}" 'warn'
    done
}

#############################################################################
