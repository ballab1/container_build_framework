#!/bin/echo 'This script cannot be executabled directly. Please source from another script'

#----------------------------------------------------------------------------------------------
#
#  general 'registry' scripts
#
#----------------------------------------------------------------------------------------------

export MAX_IMAGES_TO_KEEP=10
export http_code

#----------------------------------------------------------------------------------------------
function registry.catalog()
{
    registry.GET "$(registry.URL)/_catalog" | jq --compact-output --monochrome-output --raw-output '.repositories| sort[]?' || echo "Failed to get $(registry.URL)/_catalog" >&2
}
export -f registry.catalog

#----------------------------------------------------------------------------------------------
function registry.createTime()
{
    local -r name=${1:?}
    local -r digest=${2:?}
    shift 2
    local -ra tags=( "$@" )

    local -r manifests="$(registry.manifest "$name" "${tags[0]}")"
    if [ "$manifests" ] && [[ ! $manifests =~ MANIFEST_INVALID ]]; then
#        local fslayers=$(jq --compact-output --monochrome-output --raw-output 'try [ .fsLayers|length ]' <<< "$manifests")
        local createTime=$(jq --compact-output --monochrome-output --raw-output 'try [ .history[].v1Compatibility.created | sub("\\.\\d+Z"; "Z") | fromdate] | max | todate' <<< "$manifests")
        if [ "$createTime" ]; then
            echo "$createTime"
            return 0
        fi
    fi

    # show error info to stderr
    {
    echo -en '    \e[93m'
    echo "unable to parse time from manifest returned for $(registry.SERVER)$name:${tags[0]}"
    echo "        digest: $digest"
    if [ "${#tags[*]}" -gt 1 ]; then
        echo '        other tags: '"${tags[1]}"
        local -i i=2
        while [ $i -lt "${#tags[*]}" ]; do
            echo '                    '"${tags[$i]}"
        done
    fi
    echo "    recommend verifying that this image can be downloaded using 'docker pull $(registry.SERVER)$name:${tags[0]}'"
    echo '    if this image cannot be downloaded, it should be deleted from the repository'
    echo -e '\e[0m'
    } >&2
}
export -f registry.createTime

#----------------------------------------------------------------------------------------------
function registry.DELETE()
{
    registry.io --request DELETE "$@" || return 1
}
export -f registry.DELETE

#----------------------------------------------------------------------------------------------
function registry.deleteImage()
{
    local -r name=${1:?}
    local -r digest=${2:?}

    echo -n "deleting ${name}@$digest  "
    registry.DELETE --show-error --write-out '%{http_code}\n' "$(registry.URL)/${name}/manifests/$digest" || echo "Failed to delete $name:$digest"
    echo
}
export -f registry.deleteImage

#----------------------------------------------------------------------------------------------
function registry.digest()
{
    local -r name=${1:?}
    local -r tag=${2:?}

    local -r digest="$(registry.GET --head \
                                    --header "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                                    "$(registry.URL)/${name}/manifests/$(tr -d '"' <<< "$tag")" || echo "Failed to get $(registry.URL)/${name}/manifests/$tag" >&2)"

    [ -z "$digest" ] || ( awk '{gsub(/\r/,"");if (tolower($1) == "docker-content-digest:") {print $2}}' ) <<< "$digest"
}
export -f registry.digest

#----------------------------------------------------------------------------------------------
function registry.digests()
{
    local -r name=${1:?}
    local -r no_times=${2:-}

    if [ -z "${no_times:-}" ]; then
        registry.digestsWithTimes "$name"
    else
        registry.digestsWithoutTimes "$name"
    fi
}
export -f registry.digests

#----------------------------------------------------------------------------------------------
function registry.digestsWithTimes()
{
    local -r name=${1:?}

    local -a tags=()
    mapfile -t tags < <(registry.tags "$name")
    [ "${#tags[*]}" -gt 0 ] || return 0


    local tag digest
    local -A digests=()
    for tag in "${tags[@]}"; do
        digest=$(registry.digest "$name" "$tag")
        if [ -z "${digest:-}" ]; then
            term.elog "WARNING:  $name:$tag failed to return a digest" 'warning'
            continue
        fi
        digests["$digest"]="$(echo -en "${tag}\n${digests[$digest]:-}")"
    done


    local -A times=()
    for digest in "${!digests[@]}"; do
        tags=( ${digests[$digest]} )
        createTime="$(registry.createTime "$name" "$digest" "${tags[@]}" )"
        [ "${createTime:-}" ] || continue
        [ "${times[$createTime]:-}" ] || times[$createTime]="$digest"
    done

    echo -n '['
    local -i x=0
    for createTime in $(printf '%s\n' "${!times[@]}" | sort); do
        (( x++ )) && echo -n ','
        digest=${times[$createTime]}

        echo -n '{'
        echo -n '"digest":"'"$digest"'",'
        echo -n '"createTime":"'"$createTime"'",'
        echo -n '"tags":['
        tags=( ${digests[$digest]} )
        tag="${tags[0]}"
        for i in ${!tags[@]}; do
             [ "$i" -ne 0 ] || continue
             if [ "${#tag}" -gt "${#tags[i]}" ]; then
                 echo -n '"'"${tag}"'",'
                 tag="${tags[i]}"
             else
                 echo -n '"'"${tags[i]}"'",'
             fi
        done
        echo -n '"'"${tag}"'"]}'
    done
    echo -n ']'
}

#----------------------------------------------------------------------------------------------
function registry.digestsWithoutTimes()
{
    local -r name=${1:?}

    local -a tags=()
    mapfile -t tags < <(registry.tags "$name")
    [ "${#tags[*]}" -gt 0 ] || return 0


    local tag digest
    local -A digests=()
    for tag in "${tags[@]}"; do
        digest=$(registry.digest "$name" "$tag")
        if [ -z "${digest:-}" ]; then
            term.elog "WARNING:  $name:$tag failed to return a digest" 'warning'
            continue
        fi
        digests["$digest"]="$(echo -en "${tag}\n${digests[$digest]:-}")"
    done

    echo -n '['
    local -i x=0
    for digest in ${!digests[@]}; do
        (( x++ )) && echo -n ','
        echo -n '{'
        echo -n '"digest":"'"$digest"'",'
        echo -n '"tags":['
        tags=( ${digests[$digest]} )
        tag="${tags[0]}"
        for i in ${!tags[@]}; do
             [ "$i" -ne 0 ] || continue
             if [ "${#tag}" -gt "${#tags[i]}" ]; then
                 echo -n '"'"${tag}"'",'
                 tag="${tags[i]}"
             else
                 echo -n '"'"${tags[i]}"'",'
             fi
        done
        echo -n '"'"${tag}"'"]}'
    done
    echo -n ']'
}

#----------------------------------------------------------------------------------------------
function registry.GET()
{
    registry.io --request GET "$@" || return 1
}
export -f registry.GET

#----------------------------------------------------------------------------------------------
function registry.io()
{
    local -a args
    local headers response url
    local -i status=0
    local -A links
    local -a credentials=( $(credentials.get registry) )
    if [ "${DEBUG:-0}" -eq 0 ]; then
        credentials+=( '--silent' )
    else
        echo "curl $*" >&2
    fi

    headers=$(mktemp)
    args=( "${credentials[@]}" '--dump-header' "$headers" "$@" )
    response=$(curl "${args[@]}") && status=$? || status=$?
    unset args[$((${#args[*]}-1))]

    while [ "$status" -eq 0 ]; do
        # Status: 200 OK
        http_code=$(head -1 "$headers" | sed -Ee 's|^\S+\s+(.+)\r?$|\1|')
        if [ "${http_code:0:1}" -gt 3 ]; then
            status=-1
            continue
        fi
        [ "${DEBUG:-0}" -ne 0 ] && (echo '----------'; echo "$response" ; echo '----------'; echo )  >&2
        echo -n "$response"

        #  Link: </v2/_catalog?last=thirdparty%2Fapm-server&n=100>; rel="next"
        eval links=( $(registry.splitLinks "$headers") )
        url="${links['next']:-}"
        [ "${url:-}" ] || break

        response=$(curl "${args[@]}" "$(registry.URL)$url") && status=$? || status=$?
    done
    [ "${TMP_DIR:-}" ] || rm "$headers"
    [ "$status" -ne 0 ] || return 0

    # an error occurred
    local -r errors="$(echo "$response" | jq --compact-output --monochrome-output '.errors[]?' 2>/dev/null)"

    local curl_cmd=( 'curl' '--insecure' "$@" )
    echo
(   term.log "***ERROR: failure to complete registry request
    command:       $(printf '%s ' "${curl_cmd[@]}")
    error code:    $(jq --compact-output --monochrome-output '.code?' <<< "$errors")
    error message: $(jq --compact-output --monochrome-output '.message?' <<< "$errors")
    error details: $(jq --compact-output --monochrome-output '.detail?' <<< "$errors")
    http_code:     ${http_code:-}
    " 'warn' >&2
    )

    # check that 'term.log' was successful, otherwise, make sure something is echo'd
    [ $? -eq 0 ] || printf '%s:      %s \n    %s:    %s' 'command' "${curl_cmd[@]}" 'error code' "$errors" >&2

    return 1
}
export -f registry.io

#----------------------------------------------------------------------------------------------
function registry.layer()
{
    local -r name=${1:?}
    local -r digest=${2:?}

    registry.GET "$(registry.URL)/${name}/blobs/${digest}" || echo "Failed to get $(registry.URL)/${name}/blobs/${digest}" >&2
}
export -f registry.layer

#----------------------------------------------------------------------------------------------
function registry.manifest()
{
    local -r name=${1:?}
    local -r reference=${2:?}

    registry.GET "$(registry.URL)/${name}/manifests/${reference}" |  jq --compact-output --monochrome-output '.history[].v1Compatibility|=fromjson' || echo "Failed to get $(registry.URL)/${name}/manifests/${reference}" >&2
}
export -f registry.manifest

#----------------------------------------------------------------------------------------------
function registry.splitLinks()
{
    local -r headerFile=${1:?}

    grep -E '^Link:' "$headerFile" | sed -E 's|^Link:||'| awk '{print $0}' RS=','| sed -E -e 's| </v2|"|' -e 's|^(.*)>; rel=(.)(.*)\"\s*$|[\3]=\1\2|'
}
export -f registry.splitLinks

#----------------------------------------------------------------------------------------------
function registry.POST()
{
    registry.io --request POST "$@" || return 1
}
export -f registry.POST

#----------------------------------------------------------------------------------------------
function registry.propFile()
{
    echo "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/properties/$(basename "${BASH_SOURCE[0]%.*}").properties"
}

export REGISTRY_PROPERTIES_FILE="${REGISTRY_PROPERTIES_FILE:=$(registry.propFile)}"

#----------------------------------------------------------------------------------------------
function registry.propertiesFile()
{
    echo "${REGISTRY_PROPERTIES_FILE:=$(registry.propFile)}"
}
export -f registry.propertiesFile

#----------------------------------------------------------------------------------------------
function registry.PUT()
{
    registry.io --request PUT "$@" || return 1
}
export -f registry.PUT

#----------------------------------------------------------------------------------------------
function registry.REGISTRY()
{
    if [ "${OPTS['registry']:-}" ]; then
         echo "${OPTS['registry']}"
    else
        echo "${_REGISTRY_SERVER:=$(lib.getProperty 'REGISTRY' "$( registry.propertiesFile )")}"
    fi
}
export -f registry.REGISTRY

#----------------------------------------------------------------------------------------------
function registry.HOST()
{
    if [ "${OPTS['host']:-}" ]; then
         echo "${OPTS['host']}"
    else
        echo "${_REGISTRY_HOST:=$(lib.getHost "$( registry.SERVER )")}"
    fi
}
export -f registry.HOST

#----------------------------------------------------------------------------------------------
function registry.SERVER()
{
    if [ "${OPTS['server']:-}" ]; then
         echo "${OPTS['server']}"
    else
        echo "${_REGISTRY_SERVER:=$(lib.getProperty 'SERVER' "$( registry.propertiesFile )")}"
     fi
}
export -f registry.SERVER

#----------------------------------------------------------------------------------------------
function registry.tags()
{
    local -r name=${1:?}

    local -r json=$(registry.GET "$(registry.URL)/${name}/tags/list" || echo "Failed to get $(registry.URL)/${name}/tags/list" >&2)
    [ -z "${json:-}" ] || jq --compact-output --monochrome-output --raw-output '.tags[]?' <<< "$json"
}
export -f registry.tags

#----------------------------------------------------------------------------------------------
function registry.URL()
{
    if [ "${OPTS['url']:-}" ]; then
         echo "${OPTS['url']}"
    else
        echo "${_REGISTRY_URL:=$(lib.getProperty 'URL' "$( registry.propertiesFile )")}"
    fi
}
export -f registry.URL

#----------------------------------------------------------------------------------------------
function registry.USER()
{
    if [ "${OPTS['user']:-}" ]; then
         echo "${OPTS['user']}"
    else
         echo "${_REGISTRY_USER:=$(lib.getProperty 'USER' "$( registry.propertiesFile )")}"
    fi
}
export -f registry.USER

#----------------------------------------------------------------------------------------------
function registry.USERID()
{
    registry.USER
}
export -f registry.USERID
