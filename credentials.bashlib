#!/bin/echo 'This script cannot be executabled directly. Please source from another script'

#----------------------------------------------------------------------------------------------
#
#   credentials.bashlib
#

#----------------------------------------------------------------------------------------------
function credentials.get()
{
    local -r system=${1:?}

    # permit obtaining cached results to speed up access
    case "$system" in
        artifactory)    echo "${_ARTIFACTORY_CREDENTIALS:=$(credentials.read artifactory)}";;
        confluence)     echo "${_CONFLUENCE_CREDENTIALS:=$(credentials.read confluence)}";;
        github)         echo "${_GITHUB_CREDENTIALS:=$(credentials.read github)}";;
        jenkins)        echo "${_JENKINS_CREDENTIALS:=$(credentials.read jenkins)}";;
        jira)           echo "${_JIRA_CREDENTIALS:=$(credentials.read jira)}";;
        registry)       echo "${_REGISTRY_CREDENTIALS:=$(credentials.read registry)}";;
    esac
}
export -f credentials.get

#----------------------------------------------------------------------------------------------
function credentials.read()
{
    local -r system="${1:?}"

    local user="$( ${system}.USER )" 2>/dev/null
    [ "${user:-}" ] || user="${USERNAME:-${USER:-}}"

    if [ "${user:-}" ]; then
        local password="${!user:-}"
        [ "${password:-}" ] || password="$(lib.getProperty "$user" "$(credentials.secretsFile)")"

        if [ "${password:-}" ]; then
            echo '--user'
            echo "${user}:${password}"
            echo '--location-trusted'
            return 0
       fi
    fi

    echo '--insecure'
}
export -f credentials.read

#----------------------------------------------------------------------------------------------
function credentials.secretsFile()
{
    echo "${__SECRETS_FILE:=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/properties/secret.properties}"
    [ -e "$__SECRETS_FILE" ] || term.elog 'no passwords defined\n' 'warn'
}
export -f credentials.secretsFile
