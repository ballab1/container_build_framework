#!/bin/echo 'This script cannot be executabled directly. Please source from another script'

#----------------------------------------------------------------------------------------------
#
#   credentials.bashlib
#

#----------------------------------------------------------------------------------------------
function credentials.get()
{
    local -r system=${1:?}

    # permit obtaining cached results to speed up access
    # determine if there is a host defined, and get its IP
    local id=''
    [ "$(type -t "${system,,}.HOST")" ] && id="$( ${system,,}.HOST )"
    [ "${id:-}" ] && id="$(environ.getHostIp "$id")"
    [ "${id:-}" ] && id="_$id"
    credentials.read "${system,,}" "$id"
}
export -f credentials.get

#----------------------------------------------------------------------------------------------
function credentials.read()
{
    local -r system="${1:?}"
    local -r id="${2:-}"

    #if an API key is defined, prefer to use it
    local api_key="$(lib.getProperty "API_KEY_${system}$id" "$(credentials.secretsFile)")"
    [ "${api_key:-}" ] || [ -z "$id" ] || api_key="$(lib.getProperty "API_KEY_$system" "$(credentials.secretsFile)")"
    if [ "${api_key:-}" ]; then
        local -A auth=([artifactory]='Bearer' [confluence]='Basic' [github]='token' [grafana]='Bearer' [jenkins]='Basic' [jira]='Basic' [registry]='Bearer' )
        echo '--header'
        local token="${auth[${system}]}"
        [ -z "${token:-}" ] && token='Basic'
        printf 'Authorization: %s %s\n' "$token" "$api_key"
        if [ "$system" = 'grafana' ];then
            echo '--insecure'
        else
            echo '--location-trusted'
        fi
        return 0
    fi

    # otherwise use user/pwd
    local user="$( ${system}.USER )" 2>/dev/null
    [ "${user:-}" ] || user="${USERNAME:-${USER:-}}"

    if [ "${user:-}" ]; then
        local password="${!user:-}"
        [ "${password:-}" ] || password="$(lib.getProperty "${user}$id" "$(credentials.secretsFile)")"
        [ "${password:-}" ] || [ -z "$id" ] || password="$(lib.getProperty "$user" "$(credentials.secretsFile)")"

        if [ "${password:-}" ]; then
            echo '--user'
            echo "${user}:${password}"
            if [ "$system" = 'grafana' ];then
                echo '--insecure'
            else
                echo '--location-trusted'
            fi
            return 0
       fi
    fi

    echo '--insecure'
}
export -f credentials.read

#----------------------------------------------------------------------------------------------
function credentials.secretsFile()
{
    echo "${__SECRETS_FILE:=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/properties/secret.properties}"
    [ -e "$__SECRETS_FILE" ] || term.elog 'no passwords defined\n' 'warn'
}
export -f credentials.secretsFile
