#!/bin/bash

##########################################################
#
#  setup the 'container runtime framework' (CRF)
#
##########################################################

# copy runtime framework (only copy updates)
mkdir -p "$( cbf.CRT_BASE )"
cd "$( cbf.CRF_BASE )"

# ensure crf directories exist
while read -r dir; do
    mkdir -p "$( cbf.CRT_BASE )/$dir"
done < <(find . -maxdepth 1 -mindepth 1 -type d ! -name '.*')


# copy runtime framework (only copy updates)
while read -r file ; do
    declare action='creating'
    if [ -e "$( cbf.CRT_BASE )/$file" ]; then
        [ "$( basename "$file" )" != 'rt.environment' ] || continue
        $( ! cmp -s "$file" "$( cbf.CRT_BASE )/$file" ) || continue
        action='updating'
    fi
    echo "${action} $( cbf.CRT_BASE )/$file"
    mkdir -p "$( dirname "$( cbf.CRT_BASE )/$file" )"
    cp "$file" "$( cbf.CRT_BASE )/$file"
done< <(find . -type f ! -name '.*')

# update container name in runtime environment
crf.updateRuntimeEnvironment  "CONTAINER_NAME=\"\${CONTAINER_NAME:-$CONTAINER_NAME}\""


# create docker-entrypoint.sh from copy default entrypoint script if none exists to invoke the CRF
if [ ! -e "$( cbf.BASE )/override.entrypoint" ]; then
    # this may get refactored into processing of 'container.properties'
    if [ ! -e /usr/local/bin/docker-entrypoint.sh ]; then
        mkdir -p /usr/local/bin
        echo 'Creating docker-entrypoint.sh'
        cp "$( cbf.CRF_BIN )/default.entrypoint" /usr/local/bin/docker-entrypoint.sh

    elif [ -e "$( cbf.BASE )/usr/local/bin/docker-entrypoint.sh" ]; then 
        echo 'Potential conflict detected with existing file: /usr/local/bin/docker-entrypoint.sh'
        echo 'To prevent this error, either:'
        echo "    remove the file:       $( cbf.BASE )/usr/local/bin/docker-entrypoint.sh"
        echo "    or create an override: $( cbf.BASE )/override.entrypoint"
        exit 1
    fi
    sed -i "s|^declare -rx CONTAINER_NAME=.*$|declare -rx CONTAINER_NAME=${CONTAINER_NAME}|" /usr/local/bin/docker-entrypoint.sh
fi    



# setup some variables based on runtime properties in the Dockerfile 
declare props=/tmp/container.properties
if [ -e "$props" ]; then
    declare -i val
    while IFS='=' read -r key value; do
        case "$key" in
            entrypoint) declare entrypoint="$val";;
            command)    declare cmd="$val";;
            volumes)    declare volumes="$val";;
            user)       declare user="$val";;
            workdir)    declare workdir="$val";;
        esac
    done < "$props"
    
fi