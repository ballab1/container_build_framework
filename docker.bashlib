#!/bin/bash

#----------------------------------------------------------------------------------------------
#
#   docker.bashlib; basic functions to get info about docker containers
#

#----------------------------------------------------------------------------------------------
function docker.networks()
{
    local -a networks=( $( docker network ls | grep 'default' | awk "{ print \$1 }" ) )
    docker network inspect "${networks[@]}" \
    | jq -r ".[].Containers|.[]|[.IPv4Address + \" : \" + .Name]|.[]" \
    | sort -t "." -k 4g
}
export -f docker.networks

#----------------------------------------------------------------------------------------------
function docker.pushRetained()
{
    local -ri isRetainedImage="${1:?}"
    shift
    local -ra images=( "$@" )
    [ ${#images[*]} -eq 0 ] && return 1

    local imageList=$(docker images --format '{{.Repository}}:{{.Tag}}')

    local image
    local -a allImages=()
    for image in "${images[@]}"; do
        grep -q "$image" <<< "$imageList" || continue
        allImages+=( "$image" )
        [ "${isRetainedImage:-0}" -gt 0 ] || continue
        local fp="$(docker inspect "$image" | jq -r '.[].Config.Labels."container.fingerprint"?')"
        if [ "${fp:-}" ]; then
            allImages+=( "${image%:*}:${fp}" )
            docker tag "$image" "${image%:*}:${fp}"  > /dev/null 2>&1 ||: # ignore errors
        fi
    done
    [ "${#allImages[*]}" -gt 0 ] || trap.die 'no valid images found'
    mapfile -t allImages < <(printf '%s\n' "${allImages[@]}" | uniq)

    local attempt
    local -i wasPushed
    for image in "${allImages[@]}"; do
        wasPushed=0
        for attempt in {0..2}; do
            term.log "    Pushing ${image}"'\n' 'lt_blue'
            docker push "$image" && wasPushed=1 && break
            echo 'retrying...'
        done
        [ "$wasPushed" -eq 0 ] && trap.die "Failed to push $image"
    done

    for image in "${allImages[@]}"; do
        local -i wasTagged=0
        for inp in "${images[@]}"; do
            [ "$inp" = "$image" ] && wasTagged=1 && break
        done
        [ "$wasTagged" -eq 1 ] || docker rmi "$image"
    done
}
export -f docker.pushRetained

#----------------------------------------------------------------------------------------------
function docker.rmOldContainers()
{
    local -a collection
    local -i blocksUsedBefore="$(df /var/lib/docker/volumes | awk '{if (NR==2) {print $3}}')"

    # remove all containers which are stopped along with their associated volumes
    collection=()
    collection+=( $(docker ps --all --quiet --filter "status=dead" --format "{{.Names}}") )
    collection+=( $(docker ps --all --quiet --filter "status=exited" --format "{{.Names}}") )
    if [ ${#collection[@]} -gt 0 ]; then
        printf 'Deleting %d exited containers\n' ${#collection[@]}
        docker rm --volumes "${collection[@]}"  ||:
    fi

    # remove any 'dangling' images  (those with <none> in name)
    collection=( $(docker images --quiet --filter "dangling=true") )

    local fingerprint image
    for image in $(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep ':tmp' ||:); do
        collection+=( $image )
    done
    for image in $(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep -v '<none>' ||:); do
        fingerprint=$(docker inspect "$image" | jq -r '.[].Config.Labels."container.fingerprint"?') ||:
        [ -z "${fingerprint}:-" ] && continue
        [ "$fingerprint" != "${image##*:}" ] && continue
        collection+=( $image )
    done
    for image in $(docker images | grep '<none>' | awk '{if($1 == "<none>"){print $3}}' ||:); do
        fingerprint=$(docker inspect "$image" | jq -r '.[].Config.Labels."container.fingerprint"?') ||:
        [ -z "${fingerprint}:-" ] && continue
        [ "$fingerprint" != "${image##*:}" ] && continue
        collection+=( $image )
    done
    if [ ${#collection[@]} -gt 0 ]; then
        # do not try to remove images associated with running containers
        for image in $(docker ps --format '{{.Image}}' | sort -u); do
            collection=( ${collection[@]/$image} )
        done
        if [ ${#collection[@]} -gt 0 ]; then
            printf 'Deleting %d dangling images\n' ${#collection[@]}
            docker rmi "${collection[@]}" ||:
        fi
    fi

    # get list of volumes associated with running containers
    collection=()
    for volume in $(docker ps --all --quiet); do
        collection+=( $(docker inspect "$volume" | jq -r '.[] | .Mounts | .[] | .Name | select(.)') )
    done
    [ ${#collection[*]} -eq 0 ] || printf 'Detected %d mounts associated with running containers\n' ${#collection[*]}

    if [ ${#collection[@]} -gt 0 ]; then
        local volumes="$( printf '%s\n' "${collection[@]}" )"

        # remove directories associated with unused volumes
        local -i deletions=0
        for dir in $(sudo find '/var/lib/docker/volumes/' -mindepth 1 -maxdepth 1 -type d); do
            (grep "$dir" <<< "$volumes") && continue
            sudo rm -rf "$dir"
            (( deletions++ )) ||:
        done
        [ $deletions -eq 0 ] || printf 'Deleted %d directories associated with volumes no longer in use\n' $deletions
    fi

    local -i blocksUsedAfter="$(df /var/lib/docker/volumes | awk '{if (NR==2) {print $3}}')"
    local -i recovered=$(( blocksUsedBefore - blocksUsedAfter ))
    [ "$recovered" -gt 0 ] && printf 'Space Recovered: %d kb\n' "$recovered"
    echo
}
export -f docker.rmOldContainers

#----------------------------------------------------------------------------------------------
function docker.services()
{
    local -r dc_yaml="${1:?'no docker-compose.yml specified'}"

    docker.yamlToJson "$dc_yaml" | jq -r '.services|keys[]?'
}
export -f docker.services

#----------------------------------------------------------------------------------------------
function docker.showProcessReport()
{
    local -r opts=${1:-}

    local fmt='table {{.Names}}\t{{.ID}}\t{{.Size}}\t{{.Status}}\t{{.RunningFor}}'
    [ "$opts" ] || fmt="$fmt"'\t{{.Ports}}'

    # show process report
    echo
    mapfile -t containers < <(docker ps --format "$fmt")
    echo -e "\e[97m${containers[0]}\e[0m"
    unset containers[0]
    printf '%s\n' "${containers[@]}" | sort
}
export -f docker.showProcessReport

#----------------------------------------------------------------------------------------------
function docker.yamlToJson()
{
    local -r yamlFile=${1:?}
    local -ar YAML_TO_JSON=( 'python' '-c' 'import sys, yaml, json; json.dump(yaml.safe_load(sys.stdin), sys.stdout, indent=4)' )

    if [ -e "$yamlFile"  ]; then
        "${YAML_TO_JSON[@]}" < "$yamlFile"

    elif [[ "$yamlFile" == http* ]]; then
        "${YAML_TO_JSON[@]}" <<< "$(curl --insecure --silent --request GET "$yamlFile")"

    else
        "${YAML_TO_JSON[@]}" <<< "$yamlFile"
    fi
}
export -f docker.yamlToJson
#----------------------------------------------------------------------------------------------
