#!/bin/bash

declare __CBF_OPTIONS=$(set +o)
set +o nounset

declare _cbfTracker=/tmp/bashlibs.loaded
declare -a __files=() 

declare __base="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"  
: ${DEBUG_TRACE:=0}

# when nothing exists in 'BASHLIBS' populate it with names of _files 'source'd from crf folder
[ ! -d "${__base}/bashlib" ] || __files+=( $(find "${__base}/cbf" -maxdepth 1 -mindepth 1  -name '*.bashlib') )
[ ! -d /tmp/usr/local/crf/bashlib ] || __files+=( $(find "/tmp/usr/local/crf/bashlib" -maxdepth 1 -mindepth 1 ! -name '*.bashlib') ) 


[ ! -e "$__base/crf/bin/init.runtime" ] || source "$__base/crf/bin/init.runtime"

if [ "${#_files[@]}" -gt 0 ]; then
    for src in ${_files[@]} ; do 
        declare _filename="$( basename "$src" )"
        [ -e "$_cbfTracker" ] || touch "$_cbfTracker"
        if ! grep -sq "$_filename" "$_cbfTracker"; then
            echo "$_filename" >> "$_cbfTracker"
            # [ "$DEBUG_TRACE" = 0 ] || echo "  loading library: ${src}"
            echo "  loading library: ${src}"
            source "$src"
        fi
    done
fi

eval "$__CBF_OPTIONS"

unset __CBF_OPTIONS
unset _cbfTracker
unset _filename

cbf.__init "$__base/cbf"
[ "$( cbf.CBFBASE )" ] || trap.die 'error when setting up container build framework'
[ "$( cbf.CRT_BASE )" ] || trap.die 'error when setting up container build framework'

unset __base