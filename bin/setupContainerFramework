#!/bin/bash

#set -o verbose
set -o nounset
set -o errexit

######################################################################
function setupCBF.createStructure()
{
    local actionFolders=${1:?"must pass parameter 'actionFolders' to 'function ${FUNCNAME[0]}()'"}
    local templatesFolder=${2:?"must pass parameter 'templatesFolder' to 'function ${FUNCNAME[0]}()'"}

    # create actions folder [ is a sibling of 'container_build_framework' directory]
    [ -d "$actionFolders" ] || mkdir -p "$actionFolders"

    [ -d "${actionFolders}/05.customizations" ] || mv "${actionFolders}/05.customizations" "${actionFolders}/05.build.customizations"
    [ -d "${actionFolders}/06.permissions" ] || mv "${actionFolders}/06.permissions" "${actionFolders}/06.run.startup"

    for dir in $(find "$templatesFolder" -mindepth 1 -maxdepth 1 -type d); do
        local subdir="$(basename "$dir")"
        [ -d "${actionFolders}/$subdir" ] ||  mkdir -p "${actionFolders}/$subdir"
    done
}

######################################################################
function setupCBF.main()
{
    # load our libraries
    local -r temporaryDir="$(mktemp -d)"
    local -r projectDir="$( pwd )"


    local cbf_version="${CBF_VERSION:-dev}"
    # since no CBF directory located, attempt to download CBF based on specified verion
    local CBF_URL="https://github.com/ballab1/container_build_framework/archive/${cbf_version}.tar.gz"
    wget --no-check-certificate --quiet --output-document=- "$CBF_URL" | tar -xzC "$temporaryDir"

    # point CBF & CRF to locations in tmp workspace.  Will load libs from there
    export CBF_LOCATION="$( ls -d "$temporaryDir/container_build_framework-"* )"            # set CBF_LOCATION for testing
    export CRF_LOCATION="$CBF_LOCATION/crf"  # set CRF_LOCATION for testing
    export CONTAINER_NAME=NewContainer

    # now init stuff so we can use lib functionality
    source "${CBF_LOCATION}/bin/init.libraries" #> /dev/null 
    
    setupCBF.setupProjectFiles "$projectDir"

    rm -rf "$temporaryDir"
}

######################################################################
function setupCBF.setupProjectFiles()
{
    local top=${1:?"must pass parameter 'top' to 'function ${FUNCNAME[0]}()'"}

    cd "$top"
    local projectName="$( basename "$top" )"
    echo "setting files for project: $projectName"
    projectName=${projectName,,}
    
    local -r templatesFolder="$( cbf.CBFBASE )/project.templates"

#    [ -e Dockerfile ] || setupCBF.verifyDependentContainerExists

    # ensure our folder structure exists
    for abs_dir in $(find "$templatesFolder" -mindepth 1 -type d); do
        local dir="$( lib.relativize "$abs_dir" "$templatesFolder" )"
        mkdir -p "${top}/$dir"
    done

    # copy any missing files from project templates
    for abs_file in $(find "$templatesFolder" -type f); do
        local file="$( lib.relativize "$abs_file" "$templatesFolder" )"
        if [ ! -e "$file" ]; then
            sed "s|newcontainer|${projectName}|gi" "$abs_file" > "$file"
            echo "  created: ${file}"
        elif [ "$file" = build/build.sh ]; then
            echo "  updating: ${file}"
            [ -f "$file" ] && mv "$file" "${file}.bak"
            cp "$abs_file" "$file"
        fi
    done

    local -r actionFolders="${top}/build/action_folders"
    # remove symlinks
    find "$top" -type l -delete

    # setup out structure
    setupCBF.createStructure "$actionFolders" "$templatesFolder"
}

######################################################################
function setupCBF.verifyDependentContainerExists()
{
    if [ -z "$(  docker images --filter 'reference=base_container:*' -q --format '{{.Repository}}:{{.Tag}}' )" ];then
        term.log "The Docker image on which this project depends does not exist\n" 'error'
        term.log "Either modify this project's dependencies, or build the docker image: 'base_container:20180217'\n" 'warn'
    fi
}

######################################################################

setupCBF.main
