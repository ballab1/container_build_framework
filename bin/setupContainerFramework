#!/bin/bash

#set -o verbose
set -o nounset
set -o errexit

######################################################################
function setupCBF.createStructure()
{
    local action_folders=${1:?"must pass parameter 'action_folders' to 'function ${FUNCNAME[0]}()'"}
    local templates_folder=${2:?"must pass parameter 'templates_folder' to 'function ${FUNCNAME[0]}()'"}
    local isNew=${3:-}

    # create actions folder [ is a sibling of 'container_build_framework' directory]
    if [ -d "$action_folders" ]; then
        cd "$action_folders"
                
        # remove any old framework directories
        [ -d container_build_framework ] && (git rm -f container_build_framework || true)
        for dir in $(ls -1 container_build_framework* 2>/dev/null | true); do
            rm -rf "$dir"
        done

        # rename all folders from prior versions of CBF
        setupCBF.renameActionFolder "00.setup" "01.environment"
        setupCBF.renameActionFolder "01.setup" "01.environment"
        setupCBF.renameActionFolder "01.rt_environment" "01.environment"
        setupCBF.renameActionFolder "01.packages" "02.packages"
        setupCBF.renameActionFolder "02.users_groups" "03.users_groups"
        setupCBF.renameActionFolder "03.downloads" "04.downloads"
        setupCBF.renameActionFolder "04.applications" "05.applications"
        setupCBF.renameActionFolder "05.build.customizations" "06.post_build_mods"
        setupCBF.renameActionFolder "05.customizations" "06.post_build_mods"
        setupCBF.renameActionFolder "06.build.customizations" "06.post_build_mods"
        setupCBF.renameActionFolder "06.run.startup" "07.run.startup"
        setupCBF.renameActionFolder "06.permissions" "07.run.startup"
        setupCBF.renameActionFolder "07.cleanup" "08.cleanup"
    fi

    # ensure we have empty folders for this CBF
    if [ "$isNew" ]; then
        [ -d "$action_folders" ] || mkdir -p "$action_folders"
        cd "$action_folders"
        for dir in $(find "$templates_folder" -mindepth 1 -maxdepth 1 -type d); do
            local subdir="$(basename "$dir")"
            [ -d "$subdir" ] && continue
            echo "  creating action folder:  $subdir"
            mkdir -p "$subdir"
        done
    fi
}

######################################################################
function setupCBF.die()
{
    echo "***ERROR: $1" >&2
    exit 1
}

######################################################################
function setupCBF.isValidProject()
{
    # check if an existing project
    [ -f "${project_dir}/.cbfProject" ] &&  return 0

    # check if a new project
    [ ! -d "${project_dir}/build" ] && [ ! -f '.git' ] &&  return 0

    # check if this is an old project
    [ -f Dockerfile ] && grep -E '^ARG CBF_VERSION=' 'Dockerfile' > /dev/null &&  return 0

    echo
    echo -e "\e[93mProject not valid  ..skipping '${project_dir}'\e[0m"
    return 1
}

######################################################################
function setupCBF.main()
{
    # load our libraries
    local -r project_dir="$( pwd )"
    local temporary_dir=''


    # skip unless this is a valid project
    setupCBF.isValidProject || exit 0


    local cbf_dir
    [ "${BASH_SOURCE[0]:-}" ] && cbf_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
    if [ -z "${cbf_dir:-}" ] || [ ! -d "${cbf_dir}/cbf" ]; then
        temporary_dir="$(mktemp -d)"
        echo 'Downloading CBF from github'
        local cbf_version="${CBF_VERSION:-dev}"

        # since no CBF directory located, attempt to download CBF based on specified verion
        local -r cbf_tgz="${temporary_dir}/cbf.tar.gz"
        local -r cbf_url="https://github.com/ballab1/container_build_framework/archive/${cbf_version}.tar.gz"
        wget --no-check-certificate --quiet --output-document="$cbf_tgz" "$cbf_url" || setupCBF.die "Failed to download $cbf_url"

        tar -xzC "$temporary_dir" -f "$cbf_tgz" || setupCBF.die "$(basename "$project_dir") not setup: Failed to download $cbf_url"
        cbf_dir="$( ls -d "${temporary_dir}/container_build_framework"* 2>/dev/null )"
    fi

    # point CBF & CRF to locations in tmp workspace.  Will load libs from there
    export CBF_LOCATION="$( ls -d "$cbf_dir" )"      # set CBF_LOCATION for testing
    export CRF_LOCATION="$CBF_LOCATION/cbf"          # set CRF_LOCATION for testing
    export CONTAINER_NAME=NewContainer

    # now init stuff so we can use lib functionality
    source "${CBF_LOCATION}/cbf/bin/init.libraries"
    
    setupCBF.setupProjectFiles "$project_dir"

    # clean up
    [ "${libTracker:-}" ] && [ -e "$libTracker" ] && rm "$libTracker"
    [ "${envTracker:-}" ] && [ -e "$envTracker" ] && rm "$envTracker"
    [ "${cbfLibTracker:-}" ] && [ -e "$cbfLibTracker" ] && rm "$cbfLibTracker"
    [ "${crfLibTracker:-}" ] && [ -e "$crfLibTracker" ] && rm "$crfLibTracker"
    [ "${scanTracker:-}" ] && [ -e "$scanTracker" ] && rm "$scanTracker"

    local propFile
    propFile="$(cbf.propertiesFile)"
    [ "${propFile:-}" ] && [ -e "$propFile" ] && rm "$propFile"
    propFile="$(crf.propertiesFile)"
    [ "${propFile:-}" ] && [ -e "$propFile" ] && rm "$propFile"

    [ -z "$temporary_dir" ] || rm -rf "$temporary_dir"
}

######################################################################
function setupCBF.renameActionFolder()
{
    local org_name=${1:?"must pass parameter 'org_name' to 'function ${FUNCNAME[0]}()'"}
    local new_name=${2:?"must pass parameter 'new_name' to 'function ${FUNCNAME[0]}()'"}

    if [ -d "$org_name" ]; then
        echo "  renaming action folder:  '$(basename "$org_name")' to '$(basename "$new_name")'"
        mv "$org_name" "$new_name"
    fi
}

######################################################################
function setupCBF.setupProjectFiles()
{
    local top=${1:?"must pass parameter 'top' to 'function ${FUNCNAME[0]}()'"}

    cd "$top"
    local projectName="$( basename "$top" )"
    echo "setting files for project: $projectName"
    projectName=${projectName,,}
    
    local -r templates_folder="$( cbf.CBFBASE )/project.template"
    local isNew
    [ -e "${top}/.cbfProject" ] || isNew='true'

    if [ -e Dockerfile ] && grep -E '^COPY build /tmp/$' Dockerfile > /dev/null ; then
        echo "  updating 'Dockerfile'"
        sed -Ei -e 's|^COPY build /tmp/$|COPY build Dockerfile /tmp/|' Dockerfile
    fi

    # ensure our folder structure exists
    for abs_dir in $(find "$templates_folder" -mindepth 1 -type d); do
        local dir="$( lib.relativize "$abs_dir" "$templates_folder" )"
        mkdir -p "${top}/$dir"
    done

    # copy any missing files from project template
    local updatableFiles="build/build.sh
                          .gitignore
                          .dockerignore
                          .gitattributes"
    for abs_file in $(find "$templates_folder" -type f); do
        local file="$( lib.relativize "$abs_file" "$templates_folder" )"
        if [ ! -e "$file" ]; then
            sed "s|newcontainer|${projectName}|gi" "$abs_file" > "$file"
            echo "  created: ${file}"
        elif [ "$(grep -c "$file" <<< "$updatableFiles" 2>/dev/null)" -gt 0 ]; then
            # check if contents of files are the same
            (printf "%s %s\n" "$(sha256sum "$file" | awk '{print $1}')" "$abs_file" | sha256sum -c --status) && continue
            if [ "$file" -nt "$abs_file" ]; then
                echo -e " \e[93m newer file: ${file} - not updated\e[0m"
                continue
            fi

            echo "  updating: ${file}   previous file renamed to ${file}.bak"
            [ -f "$file" ] && mv "$file" "${file}.bak"
            cp "$abs_file" "$file"
        fi
    done
    
    # make sure '.cbfProject' exists
    if  [ ! -e "${top}/.cbfProject" ]; then
        echo '[project]' > "${top}/.cbfProject"
        echo "container_name=$projectName" >> "${top}/.cbfProject"
    fi

    # remove symlinks
    find "$top" -mindepth 2 -type l -delete
    

    # remove any old CBF folders that exist (for testing or old CBF)
    for dir in $(find "${top}/build" -type d -name 'container_build_framework*');  do
        echo "  removing $dir" 
        rm -rf "$dir"
    done


    # setup our structure
    local -r action_folders="${top}/build/action_folders"
    setupCBF.createStructure "$action_folders" "$( cbf.CBFBASE )/action.templates" "${isNew:-}"
}

######################################################################
function setupCBF.verifyDependentContainerExists()
{
    if [ -z "$(  docker images --filter 'reference=base_container:*' -q --format '{{.Repository}}:{{.Tag}}' )" ];then
        term.log "The Docker image on which this project depends does not exist\n" 'error'
        term.log "Either modify this project's dependencies, or build the docker image: 'base_container:20180217'\n" 'warn'
    fi
}

######################################################################

setupCBF.main
