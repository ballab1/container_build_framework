#!/bin/bash

#set -o verbose
set -o nounset
set -o errexit

######################################################################
function update()
{
    local old=${1:?"must pass parameter 'old' to 'function ${FUNCNAME[0]}()'"}
    local new=${2:?"must pass parameter 'new' to 'function ${FUNCNAME[0]}()'"}
    
    [ -d "$old" ] && mv "$old" "$new"
    while read -r file; do
        sed -i "s/${old}/${new}/g" "$file"
    done < <(find . -type f -name '0*')
    while read -r file; do
        awk '!/{TOOLS}/' "$file" > "${file}.tmp"
        mv "${file}.tmp" "$file"
    done < <(find . -type f -name '0*' -exec grep -Hc '{TOOLS}' '{}' \; | grep -v ':0' | awk -F: '{ print $1 }')
}

######################################################################
function createStructure()
{
    local actionFolders=${1:?"must pass parameter 'actionFolders' to 'function ${FUNCNAME[0]}()'"}
    local templatesFolder=${2:?"must pass parameter 'templatesFolder' to 'function ${FUNCNAME[0]}()'"}

    
    # create actions folder [ should be a sibling of 'container_build_framework' ]
    if [ -d "$( dirname "$actionFolders")/container" ]; then
        # migrate old framework
        [ -d "${CBF['base']}/container_lib" ] && rm -rf "${CBF['base']}/container_lib"
        mv "${CBF['base']}/container" "$actionFolders"
        cd "$actionFolders"
        find . -type l -delete
        find . -name '.Do Not Delete' -delete
        update 02.packages 01.packages
        update 03.users_groups 02.users_groups
        update 04.downloads 03.downloads
        update 05.applications 04.applications
        update 06.customizations 05.customizations
        update 07.permissions 06.permissions
        update 08.cleanup 07.cleanup
    else
        mkdir -p "$actionFolders"
        cd "$actionFolders"
    fi

    local relativePath="../$( cbf.relativize "$actionFolders" "$templatesFolder" )"
    local dirs=( $( ls -d "$templatesFolder"/* ) )
    for lib in ${dirs[@]}; do
        [ ! -d "$lib" ] && continue

        local dir="$( basename "$lib" )"
        mkdir -p "${actionFolders}/${dir}"
        cd "${actionFolders}/${dir}"


        while read -r fl ;do
            local file="$( basename "$fl" )"
            [ -h "$file" ] && rm "$file"
            [ -e "$file" ] && rm "$file"
            echo "Creating symlink to ${relativePath}/${dir}/${file}"
            ln -s "${relativePath}/${dir}/${file}" .
        done < <(find "${templatesFolder}/${dir}" -maxdepth 1 -type f ! -name '.*')
    done
}

######################################################################
function main()
{
    # load our libraries
    source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/init.libraries"
    cbf.__init

    # scan lib folders and create symlinks for any files found
    createStructure "${CBF['action']}" "${CBF['templates']}"

    # create symlink for build script
    cd "${CBF['base']}"
    [ -e build.sh ] && rm build.sh
    local relativePath="$( cbf.relativize "${CBF['base']}" "${CBF['bin']}" )"
    echo "ln -s ${relativePath}/build.sh ."
    ln -s "${relativePath}/build.sh" .
}


main
