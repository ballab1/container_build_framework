#!/bin/bash

#set -o verbose
set -o nounset
set -o errexit

######################################################################
function setupCBF.createStructure()
{
    local actionFolders=${1:?"must pass parameter 'actionFolders' to 'function ${FUNCNAME[0]}()'"}
    local templatesFolder=${2:?"must pass parameter 'templatesFolder' to 'function ${FUNCNAME[0]}()'"}

    
    # create actions folder [ should be a sibling of 'container_build_framework' ]
    if [ -d "$( dirname "$actionFolders")/container" ]; then
        # migrate old framework
        setupCBF.migrateOldFx "$actionFolders"
    else
        mkdir -p "$actionFolders"
        cd "$actionFolders"
    fi

    setupCBF.createSymlinks "$actionFolders" "$templatesFolder"
}

######################################################################
function setupCBF.createSymlinks()
{
    local actionFolders=${1:?"must pass parameter 'actionFolders' to 'function ${FUNCNAME[0]}()'"}
    local templatesFolder=${2:?"must pass parameter 'templatesFolder' to 'function ${FUNCNAME[0]}()'"}

    local relativePath="../$( lib.relativize "$actionFolders" "$templatesFolder" )"
    local dirs=( $( ls -d "$templatesFolder"/* ) )
    for lib in ${dirs[@]}; do
        [ ! -d "$lib" ] && continue

        local dir="$( basename "$lib" )"
        mkdir -p "${actionFolders}/${dir}"
        cd "${actionFolders}/${dir}"


        while read -r fl ;do
            local file="$( basename "$fl" )"
            [ -h "$file" ] && rm "$file"
            [ -e "$file" ] && rm "$file"
            echo "Creating symlink to ${relativePath}/${dir}/${file}"
            ln -s "${relativePath}/${dir}/${file}" .
        done < <(find "${templatesFolder}/${dir}" -maxdepth 1 -type f ! -name '.*')
    done
}

######################################################################
function setupCBF.migrateOldFx()
{
    local actionFolders=${1:?"must pass parameter 'actionFolders' to 'function ${FUNCNAME[0]}()'"}

    # migrate old framework
    [ -d "${CBF['base']}/container_lib" ] && rm -rf "${CBF['base']}/container_lib"
    mv "${CBF['base']}/container" "$actionFolders"

    cd "$actionFolders"
    
    # get rid of symlinks and files to keep folders in GIT
    find . -type l -delete
    find . -name '.Do Not Delete' -delete
    
    # migrate the folder structure
    setupCBF.updateFiles "02.packages" "01.packages"
    setupCBF.updateFiles "03.users_groups" "02.users_groups"
    setupCBF.updateFiles "04.downloads" "03.downloads"
    setupCBF.updateFiles "05.applications" "04.applications"
    setupCBF.updateFiles "06.customizations" "05.customizations"
    setupCBF.updateFiles "07.permissions" "06.permissions"
    setupCBF.updateFiles "08.cleanup" "07.cleanup"
    
    #remove any references to our scripts since they are no longer needed
    while read -r file; do
        awk '!/01.bashlib/' "$file" > "${file}.tmp"
        mv "${file}.tmp" "$file"
    done < <(find . -type f -name '0*' -exec grep -Hc '01.bashlib' '{}' \; | grep -v ':0' | awk -F: '{ print $1 }')
}

######################################################################
function setupCBF.main()
{
    # load our libraries
    source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/init.libraries"

    # scan lib folders and create symlinks for any files found
    setupCBF.createStructure "${CBF['action']}" "${CBF['templates']}"

    # create symlink for build script
    cd "${CBF['base']}"
    [ -e build.sh ] && rm build.sh
    local relativePath="$( lib.relativize "${CBF['base']}" "${CBF['bin']}" )"
    echo "Creating symlink to ${relativePath}/build.sh"
    ln -s "${relativePath}/build.sh" .
    
    setupCBF.setupProjectFiles "$( setupCBF.getSuperProjectDir )"
}

######################################################################
function setupCBF.getSuperProjectDir()
{   
    cd "${CBF['base']}/.."
    pwd
#    cd "${CBF['bin']}"
#    local top="$(git rev-parse --show-superproject-working-tree)"
#    if [ "$top" ]; then
#    
#    fi
}

######################################################################
function setupCBF.setupProjectFiles()
{
    local top=${1:?"must pass parameter 'top' to 'function ${FUNCNAME[0]}()'"}

    cd "$top"
    local projectName="$( basename "$top" )"
    echo "setting files for superProject: $projectName"
    projectName=${projectName,,}

    [ ! -e Dockerfile ] && setupCBF.verifyDepententContainerExists

    # ensure our folder structure exists
    while read -r abs_dir; do
        local dir="$( lib.relativize "${CBF['cbfbase']}/project.templates" "$abs_dir" )"
        mkdir -p "${top}/$dir"  
    done < <(find "${CBF['cbfbase']}/project.templates" -mindepth 1 -type d)

    # copy any missing files from project templates
    while read -r abs_file; do
        local file="$( lib.relativize "${CBF['cbfbase']}/project.templates" "$abs_file" )"
        if [ ! -e "$file" ]; then
            sed "s|newcontainer|${projectName}|gi" "$abs_file" > "$file"
            echo "  created: ${file}"
        fi
    done < <(find "${CBF['cbfbase']}/project.templates" -type f)
}

######################################################################
function setupCBF.updateFiles()
{
    local old=${1:?"must pass parameter 'old' to 'function ${FUNCNAME[0]}()'"}
    local new=${2:?"must pass parameter 'new' to 'function ${FUNCNAME[0]}()'"}
    
    [ -d "$old" ] && mv "$old" "$new"
    while read -r file; do
        sed -i "s|\${TOOLS}/${old}|\\$\\{CBF['action']\\}/${new}|g" "$file"
    done < <(find . -type f -name '0*')
}

######################################################################
function setupCBF.verifyDepententContainerExists()
{
    if [ -z "$(  docker images --filter 'reference=base_container:*' -q --format '{{.Repository}}:{{.Tag}}' )" ];then
        $LOG "The Docker image on which this project depends does not exist${LF}" 'error'
        $LOG "Either modify this project's dependencies, or build the docker image: 'base_container:20180217'${LF}" 'warn'
    fi
}

######################################################################

setupCBF.main
