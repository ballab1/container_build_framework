#!/bin/bash

#set -o verbose
set -o nounset
set -o errexit

######################################################################
function setupCBF.createStructure()
{
    local actionFolders=${1:?"must pass parameter 'actionFolders' to 'function ${FUNCNAME[0]}()'"}
    local templatesFolder=${2:?"must pass parameter 'templatesFolder' to 'function ${FUNCNAME[0]}()'"}

    # create actions folder [ is a sibling of 'container_build_framework' directory]
    [ -d "$actionFolders" ] || mkdir -p "$actionFolders"

    if [ -d "${actionFolders}/00.setup" ]; then
        echo "  renaming action folder:  '00.setup' to '01.setup'"
        mv "${actionFolders}/00.setup" "${actionFolders}/01.setup"
    fi
    if [ -d "${actionFolders}/01.packages" ]; then
        echo "  renaming action folder:  '01.packages' to '02.packages'"
        mv "${actionFolders}/01.packages" "${actionFolders}/02.packages"
    fi
    if [ -d "${actionFolders}/02.users_groups" ]; then
        echo "  renaming action folder:  '02.users_groups' to '03.users_groups'"
        mv "${actionFolders}/02.users_groups" "${actionFolders}/03.users_groups"
    fi
    if [ -d "${actionFolders}/03.downloads" ]; then
        echo "  renaming action folder:  '03.downloads' to '04.downloads'"
        mv "${actionFolders}/03.downloads" "${actionFolders}/04.downloads"
    fi
    if [ -d "${actionFolders}/04.applications" ]; then
        echo "  renaming action folder:  '04.applications' to '05.applications'"
        mv "${actionFolders}/04.applications" "${actionFolders}/05.applications"
    fi
    if [ -d "${actionFolders}/05.build.customizations" ]; then
        echo "  renaming action folder:  '05.build.customizations' to '06.build.customizations'"
        mv "${actionFolders}/05.build.customizations" "${actionFolders}/06.build.customizations"
    fi
    if [ -d "${actionFolders}/05.customizations" ]; then
        echo "  renaming action folder:  '05.customizations' to '06.build.customizations'"
        mv "${actionFolders}/05.customizations" "${actionFolders}/06.build.customizations"
    fi
    if [ -d "${actionFolders}/06.run.startup" ]; then
        echo "  renaming action folder:  '06.run.startup' to '07.run.startup'"
        mv "${actionFolders}/06.run.startup" "${actionFolders}/07.run.startup"
    fi
    if [ -d "${actionFolders}/06.permissions" ]; then
        echo "  renaming action folder:  '06.permissions' to '07.run.startup'"
        mv "${actionFolders}/06.permissions" "${actionFolders}/07.run.startup"
    fi
    if [ -d "${actionFolders}/07.cleanup" ]; then
        echo "  renaming action folder:  '07.cleanup' to '08.cleanup'"
        mv "${actionFolders}/07.cleanup" "${actionFolders}/08.cleanup"
    fi
    
    for dir in $(find "$templatesFolder" -mindepth 1 -maxdepth 1 -type d); do
        local subdir="$(basename "$dir")"
        [ -d "${actionFolders}/$subdir" ] && continue
        echo "  creating action folder:  $subdir"
        mkdir -p "${actionFolders}/$subdir"
    done
}

######################################################################
function setupCBF.main()
{
    # load our libraries
    local -r projectDir="$( pwd )"
    local temporaryDir=''

    local cbf_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
    if [ ! -d "${cbf_dir}/cbf" ]; then
        temporaryDir="$(mktemp -d)"
        echo 'Downloading CBF from github'
        local cbf_version="${CBF_VERSION:-dev}"
        # since no CBF directory located, attempt to download CBF based on specified verion
        local -r CBF_URL="https://github.com/ballab1/container_build_framework/archive/${cbf_version}.tar.gz"
        (wget --no-check-certificate --quiet --output-document=- "$CBF_URL" | tar -xz) || die "$(basename "$projectDir") not setup: Failed to download $CBF_URL"
        cbf_dir="$( ls -d container_build_framework-* 2>/dev/null )"
    fi

    # point CBF & CRF to locations in tmp workspace.  Will load libs from there
    export CBF_LOCATION="$( ls -d "$cbf_dir" )"      # set CBF_LOCATION for testing
    export CRF_LOCATION="$CBF_LOCATION/cbf"          # set CRF_LOCATION for testing
    export CONTAINER_NAME=NewContainer

    # now init stuff so we can use lib functionality
    source "${CBF_LOCATION}/cbf/bin/init.libraries"
    
    setupCBF.setupProjectFiles "$projectDir"

    [ -z "$temporaryDir" ] || rm -rf "$temporaryDir"
}

######################################################################
function setupCBF.setupProjectFiles()
{
    local top=${1:?"must pass parameter 'top' to 'function ${FUNCNAME[0]}()'"}

    cd "$top"
    local projectName="$( basename "$top" )"
    echo "setting files for project: $projectName"
    projectName=${projectName,,}
    
    local -r templatesFolder="$( cbf.CBFBASE )/project.template"

#    [ -e Dockerfile ] || setupCBF.verifyDependentContainerExists

    # ensure our folder structure exists
    for abs_dir in $(find "$templatesFolder" -mindepth 1 -type d); do
        local dir="$( lib.relativize "$abs_dir" "$templatesFolder" )"
        mkdir -p "${top}/$dir"
    done

    # copy any missing files from project template
    for abs_file in $(find "$templatesFolder" -type f); do
        local file="$( lib.relativize "$abs_file" "$templatesFolder" )"
        if [ ! -e "$file" ]; then
            sed "s|newcontainer|${projectName}|gi" "$abs_file" > "$file"
            echo "  created: ${file}"
        elif [ "$file" = build/build.sh ]; then
            (printf "%s %s\n" "$(sha256sum "$file" | awk '{print $1}')" "$abs_file" | sha256sum -c --status) && continue
            echo "  updating: ${file}   previous file renamed to ${file}.bak"
            [ -f "$file" ] && mv "$file" "${file}.bak"
            cp "$abs_file" "$file"
        fi
    done

    local -r actionFolders="${top}/build/action_folders"
    # remove symlinks
    find "$top" -mindepth 1 -type l -delete

    # setup out structure
    setupCBF.createStructure "$actionFolders" "$( cbf.CBFBASE )/action.templates"
}

######################################################################
function setupCBF.verifyDependentContainerExists()
{
    if [ -z "$(  docker images --filter 'reference=base_container:*' -q --format '{{.Repository}}:{{.Tag}}' )" ];then
        term.log "The Docker image on which this project depends does not exist\n" 'error'
        term.log "Either modify this project's dependencies, or build the docker image: 'base_container:20180217'\n" 'warn'
    fi
}

######################################################################

setupCBF.main
