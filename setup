#!/bin/bash -x

#set -o verbose
#set -o nounset
#set -o errexit

declare TOOLS="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )" 
echo $TOOLS
function createStructure()
{
    mkdir -p "${TOOLS}/container/02.packages"
    mkdir -p "${TOOLS}/container/03.users_groups"
    mkdir -p "${TOOLS}/container/04.downloads"
    mkdir -p "${TOOLS}/container/05.applications"
    mkdir -p "${TOOLS}/container/06.customizations"
    mkdir -p "${TOOLS}/container/07.permissions"
    mkdir -p "${TOOLS}/container/08.cleanup"
}

function createSymlinks()
{
    local dr=${1:?"must pass parameter 'dr' to ${FUNCNAME[0]}"}
echo $dr
    
    local dir="$( basename "$dr" )"
    [ $dir = '01.bashlib' ] && return 0

    cd "${TOOLS}/container/${dir}"
    while read -r fl ;do
        local file="$( basename "$fl" )"
echo $fl
#        [ -e "$file" ] && rm "$file"
#        ln -s "../../container_lib/${dir}/${fl}" .
    done < <(find "$dr" -maxdepth 1 -type f ! -name '.*')
}

function scanLibFolders()
{
    [ -d 01.bashlib ] && rm -rf 01.bashlib
    [ -e build.sh ] && rm build.sh

    # scan lib folders and create symlinks for any files found
    while read -r dr ;do
        scanLibFolders $dr        
    done < <(find "${TOOLS}/container_lib" -maxdepth 1 -type d ! -path '.' ! -path './.*')

    cd "${TOOLS}/container"
    ln -s ../container_lib/01.bashlib .
    ln -s ../container_lib/build.sh .
}


if [ ! -d container ]; then
    createStructure
    scanLibFolders

elif [ -d container ] && [ -d container_lib ]; then
    scanLibFolders
fi
